(window.webpackJsonp=window.webpackJsonp||[]).push([[243],{703:function(e,t,r){"use strict";r.r(t);var a=r(7),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"软件测试和自动化测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#软件测试和自动化测试"}},[e._v("#")]),e._v(" 软件测试和自动化测试")]),e._v(" "),t("h3",{attrs:{id:"软件测试概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#软件测试概述"}},[e._v("#")]),e._v(" 软件测试概述")]),e._v(" "),t("p",[e._v("软件测试是一种用来促进鉴定软件的正确性、完整性、安全性和品质的过程，也就是在规定的条件下对程序进行操作以发现程序中的错误，衡量软件的品质并对其是否能满足设计要求进行评估的过程。")]),e._v(" "),t("h4",{attrs:{id:"测试的方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试的方法"}},[e._v("#")]),e._v(" 测试的方法")]),e._v(" "),t("p",[e._v("黑盒测试：测试应用程序的功能，而不是其内部结构或运作。测试者不需具备应用程序的代码、内部结构和编程语言的专门知识。测试者只需知道什么是系统应该做的事，即当键入一个特定的输入，可得到一定的输出。测试案例是依应用系统应该做的功能，照规范、规格或要求等设计。测试者选择有效输入和无效输入来验证是否正确的输出。此测试方法可适合大部分的软件测试，例如集成测试和系统测试。")]),e._v(" "),t("p",[e._v("白盒测试：测试应用程序的内部结构或运作，而不是测试应用程序的功能（即黑箱测试）。在白箱测试时，以编程语言的角度来设计测试案例。测试者输入数据验证数据流在程序中的流动路径，并确定适当的输出，类似测试电路中的节点。")]),e._v(" "),t("p",[e._v("由于时间和成本的约束，软件测试中一个最为关键的问题就是：“"),t("strong",[e._v("在所有可能的测试用例中，哪个子集能发现最多的错误？")]),e._v("”。所以在设计测试用例时，白盒测试看重程序逻辑覆盖的程度（语句覆盖、条件覆盖、分支覆盖），黑盒测试可以使用等价类划分、边界值分析、因果图分析、错误猜测等方法来设计测试用例。")]),e._v(" "),t("h4",{attrs:{id:"测试的种类-阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试的种类-阶段"}},[e._v("#")]),e._v(" 测试的种类（阶段）")]),e._v(" "),t("p",[e._v("单元测试：对软件组成单元进行测试，其目的是检验软件基本组成单位的正确性，测试的对象是软件设计的最小单位 - 函数。")]),e._v(" "),t("p",[e._v("集成测试：将程序模块采用适当的集成策略组装起来，对系统的接口及集成后的功能进行正确性检测的测试工作。其主要目的是检查软件单位之间的接口是否正确，集成测试的对象是已经经过单元测试的模块。")]),e._v(" "),t("p",[e._v("系统测试：系统测试主要包括功能测试、界面测试、可靠性测试、易用性测试、性能测试。")]),e._v(" "),t("p",[e._v("回归测试：为了检测代码修改而引入的错误所进行的测试活动。回归测试是软件维护阶段的重要工作，有研究表明，回归测试带来的耗费占软件生命周期的1/3总费用以上。")]),e._v(" "),t("h4",{attrs:{id:"测试驱动开发-敏捷测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试驱动开发-敏捷测试"}},[e._v("#")]),e._v(" 测试驱动开发（敏捷测试）")]),e._v(" "),t("p",[e._v("测试驱动开发包括以下三个步骤：")]),e._v(" "),t("ol",[t("li",[e._v("为未实现的新功能或者改进编写自动化测试。")]),e._v(" "),t("li",[e._v("提供通过所有定义的测试的最小代码量。")]),e._v(" "),t("li",[e._v("重构代码以满足所需的质量标准。")])]),e._v(" "),t("p",[e._v("测试驱动开发的好处在于可以有效的防止软件回归以及提供更有质量的代码。还有就是验收测试应该由客户来进行，客户通过对使用场景来设计验收测试，对应用程序是否满足他们的要求进行客观、公正的确认。能够通过单元测试、甚至是系统测试的功能未必能够通过客户的验收测试。")]),e._v(" "),t("h4",{attrs:{id:"互联网应用和移动应用的测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#互联网应用和移动应用的测试"}},[e._v("#")]),e._v(" 互联网应用和移动应用的测试")]),e._v(" "),t("p",[e._v("互联网应用的测试策略：")]),e._v(" "),t("ol",[t("li",[e._v("表示层测试（内容测试、站点结构测试、用户环境（浏览器、操作系统等））")]),e._v(" "),t("li",[e._v("业务层测试（性能、数据验证、事务、外部服务）")]),e._v(" "),t("li",[e._v("持久层测试（响应时间、数据完整性、容错性）")])]),e._v(" "),t("p",[e._v("移动应用的测试策略：")]),e._v(" "),t("ol",[t("li",[e._v("真机测试")]),e._v(" "),t("li",[e._v("基于模拟器的测试")])]),e._v(" "),t("h3",{attrs:{id:"单元-模块-测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单元-模块-测试"}},[e._v("#")]),e._v(" 单元（模块）测试")]),e._v(" "),t("p",[e._v("Python的标准库里有为编写单元测试而准备的unittest模块，执行测试时建议使用"),t("a",{attrs:{href:"https://docs.pytest.org/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[e._v("pytest"),t("OutboundLink")],1),e._v("或nose2。pytest是一款能够自动搜索并执行测试的测试执行工具，并且会输出详细的错误报告。关于单元测试可以看看"),t("a",{attrs:{href:"https://blog.csdn.net/huilan_same/article/details/52944782",target:"_blank",rel:"noopener noreferrer"}},[e._v("《Python必会的单元测试框架 - unittest》"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("可以安装"),t("a",{attrs:{href:"https://pypi.org/project/testfixtures/",target:"_blank",rel:"noopener noreferrer"}},[e._v("testfixtures"),t("OutboundLink")],1),e._v("库来辅助单元测试，它整合了多种典型配置器，提供了生成目录、更改系统日期、生成mock对象的功能模块，这些模块能够帮助我们将单元测试与单元测试所依赖的环境分离开。"),t("a",{attrs:{href:"https://pypi.org/project/mock/",target:"_blank",rel:"noopener noreferrer"}},[e._v("mock"),t("OutboundLink")],1),e._v(" 是将测试对象所依赖的对象替换为虚拟对象的库，在测试的时候，我们可以为虚拟对象指定其在被调用时的返回值以及是否发生异常等。")]),e._v(" "),t("p",[e._v("tox能便捷地为我们准备好执行测试所需的环境。tox会在多个virtualenv环境中搭建测试 环境，然后在这些环境中执行测试并显示结果。它能够把测试工具的选项及环境变量等内容统 一起来，所以我们只需执行tox命令即能轻松完成所需的测试。")]),e._v(" "),t("h3",{attrs:{id:"自动化测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动化测试"}},[e._v("#")]),e._v(" 自动化测试")]),e._v(" "),t("h4",{attrs:{id:"ui自动化测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ui自动化测试"}},[e._v("#")]),e._v(" UI自动化测试")]),e._v(" "),t("h5",{attrs:{id:"桌面端-pyautogui"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#桌面端-pyautogui"}},[e._v("#")]),e._v(" 桌面端 - "),t("a",{attrs:{href:"https://pyautogui.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[e._v("PyAutoGui"),t("OutboundLink")],1)]),e._v(" "),t("h5",{attrs:{id:"移动端-appnium"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#移动端-appnium"}},[e._v("#")]),e._v(" 移动端 - "),t("a",{attrs:{href:"http://appium.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Appnium"),t("OutboundLink")],1)]),e._v(" "),t("h5",{attrs:{id:"web端-selenium"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web端-selenium"}},[e._v("#")]),e._v(" Web端 - "),t("a",{attrs:{href:"https://docs.seleniumhq.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Selenium"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Selenium是实现Web应用程序的功能测试以及集成测试自动化的浏览器驱动测试工具群。和使用浏览器的用户相同，Selenium可以在浏览器进行的鼠标操作、在表单中输入文字、验证表单的值等，利用这一点就可以将手动操作变成自动化操作。")]),e._v(" "),t("ol",[t("li",[e._v("Selenium优点")])]),e._v(" "),t("ul",[t("li",[e._v("自动化测试用例制作简单。Selenium提供了Selenium IDE工具，该工具可以捕获鼠标、键盘的操作，然后通过重放功能来重复这些操作，这样就可以简单的制作测试用例。")]),e._v(" "),t("li",[e._v("支持多种浏览器和操作系统。")])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("Selenium的组件")])]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.seleniumhq.org/projects/ide/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Selenium IDE"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.seleniumhq.org/projects/remote-control/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Selenium Remote Control"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.seleniumhq.org/projects/webdriver/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Selenium WebDriver"),t("OutboundLink")],1)])]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[t("p",[e._v("与持续集成工具协作")]),e._v(" "),t("p",[e._v("持续集成指的是频繁的将代码集成到主干。它的好处主要有两个：")]),e._v(" "),t("ul",[t("li",[e._v("快速发现错误。每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。")]),e._v(" "),t("li",[e._v("防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。")])]),e._v(" "),t("p",[e._v("持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是代码集成到主干之前，必须通过自动化测试，只要有一个测试用例失败，就不能集成。编程大师Martin Fowler曾经说过：“持续集成并不能消除Bug，而是让它们非常容易发现和改正。”")]),e._v(" "),t("p",[e._v("可以在Jenkins中安装“Seleniumhq Plugin”插件，这样就可以将Selenium IDE制作的测试用例保存为HTML格式并提供给Jenkins来使用，基本步骤是：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("在执行测试的机器上，从版本控制系统中下载测试套件和测试用例。")])]),e._v(" "),t("li",[t("p",[e._v("在执行测试的机器上下载Selenium Server。")])]),e._v(" "),t("li",[t("p",[e._v("从Jenkins的“系统管理”中选择“插件管理”来安装“Seleniumhq Plugin”。")])]),e._v(" "),t("li",[t("p",[e._v("在Jenkins的“系统管理”中选择“系统设置”并配置“Selenium Remote Control”下的“HTMLSuite Runner”。")])]),e._v(" "),t("li",[t("p",[e._v("新建测试用的Jenkins任务并进行配置，配置的内容包括：浏览器、起始URL、测试套件和测试结果输出文件。")])])]),e._v(" "),t("p",[e._v("配置完成后，就可以执行Jenkins的“立即构建”了。")])])]),e._v(" "),t("p",[e._v("除了Selenium之外，"),t("a",{attrs:{href:"https://pypi.org/project/WebTest/",target:"_blank",rel:"noopener noreferrer"}},[e._v("WebTest"),t("OutboundLink")],1),e._v("、"),t("a",{attrs:{href:"https://splinter.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Splinter"),t("OutboundLink")],1),e._v("和"),t("a",{attrs:{href:"https://robotframework.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("RobotFramework"),t("OutboundLink")],1),e._v("也是Web端测试的选择，其中WebTest可以对WSGI应用执行模拟请求并获取结果，基本上所有WSGI应用的测试都可以用它；Splinter是对Selenium的二次封装，使用上更加方便简单。")]),e._v(" "),t("h4",{attrs:{id:"接口测试自动化测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口测试自动化测试"}},[e._v("#")]),e._v(" 接口测试自动化测试")]),e._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://cn.python-requests.org/zh_CN/latest/",target:"_blank",rel:"noopener noreferrer"}},[e._v("requests"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.httprunner.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("HttpRunner"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/svanoort/pyresttest",target:"_blank",rel:"noopener noreferrer"}},[e._v("PyRestTest"),t("OutboundLink")],1)])]),e._v(" "),t("h4",{attrs:{id:"其他方面的自动化测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他方面的自动化测试"}},[e._v("#")]),e._v(" 其他方面的自动化测试")]),e._v(" "),t("ol",[t("li",[t("p",[t("a",{attrs:{href:"https://www.locust.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Locust"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://github.com/m4n3dw0lf/PytheM",target:"_blank",rel:"noopener noreferrer"}},[e._v("pythem"),t("OutboundLink")],1)])])]),e._v(" "),t("h3",{attrs:{id:"测试相关工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试相关工具"}},[e._v("#")]),e._v(" 测试相关工具")]),e._v(" "),t("ol",[t("li",[e._v("PostMan")]),e._v(" "),t("li",[e._v("AB")]),e._v(" "),t("li",[e._v("JMeter")]),e._v(" "),t("li",[e._v("LoadRunner")]),e._v(" "),t("li",[e._v("Benchmark Factory")]),e._v(" "),t("li",[e._v("WAS")])])])}),[],!1,null,null,null);t.default=n.exports}}]);