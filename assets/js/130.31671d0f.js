(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{563:function(s,t,a){"use strict";a.r(t);var e=a(7),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"restful架构和drf进阶"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#restful架构和drf进阶"}},[s._v("#")]),s._v(" RESTful架构和DRF进阶")]),s._v(" "),t("p",[s._v("除了上一节讲到的方法，使用DRF创建REST风格的数据接口也可以通过CBV（基于类的视图）的方式。使用CBV创建数据接口的特点是代码简单，开发效率高，但是没有FBV（基于函数的视图）灵活，因为使用FBV的方式，数据接口对应的视图函数执行什么样的代码以及返回什么的数据是高度可定制的。下面我们以定制学科的数据接口为例，讲解通过CBV方式定制数据接口的具体做法。")]),s._v(" "),t("h3",{attrs:{id:"使用cbv"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用cbv"}},[s._v("#")]),s._v(" 使用CBV")]),s._v(" "),t("h4",{attrs:{id:"继承apiview的子类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#继承apiview的子类"}},[s._v("#")]),s._v(" 继承APIView的子类")]),s._v(" "),t("p",[s._v("修改之前项目中的"),t("code",[s._v("polls/views.py")]),s._v("，去掉"),t("code",[s._v("show_subjects")]),s._v("视图函数，添加一个名为"),t("code",[s._v("SubjectView")]),s._v("的类，该类继承自"),t("code",[s._v("ListAPIView")]),s._v("，"),t("code",[s._v("ListAPIView")]),s._v("能接收GET请求，它封装了获取数据列表并返回JSON数据的"),t("code",[s._v("get")]),s._v("方法。"),t("code",[s._v("ListAPIView")]),s._v("是"),t("code",[s._v("APIView")]),s._v(" 的子类，"),t("code",[s._v("APIView")]),s._v("还有很多的子类，例如"),t("code",[s._v("CreateAPIView")]),s._v("可以支持POST请求，"),t("code",[s._v("UpdateAPIView")]),s._v("可以支持PUT和PATCH请求，"),t("code",[s._v("DestoryAPIView")]),s._v("可以支持DELETE请求。"),t("code",[s._v("SubjectView")]),s._v(" 的代码如下所示。")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" rest_framework"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("generics "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" ListAPIView\n\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SubjectView")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ListAPIView"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通过queryset指定如何获取学科数据")]),s._v("\n    queryset "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Subject"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("objects"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("all")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通过serializer_class指定如何序列化学科数据")]),s._v("\n    serializer_class "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" SubjectSerializer\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("刚才说过，由于"),t("code",[s._v("SubjectView")]),s._v("的父类"),t("code",[s._v("ListAPIView")]),s._v("已经实现了"),t("code",[s._v("get")]),s._v("方法来处理获取学科列表的GET请求，所以我们只需要声明如何获取学科数据以及如何序列化学科数据，前者用"),t("code",[s._v("queryset")]),s._v("属性指定，后者用"),t("code",[s._v("serializer_class")]),s._v("属性指定。要使用上面的"),t("code",[s._v("SubjectView")]),s._v("，需要修改"),t("code",[s._v("urls.py")]),s._v("文件，如下所示。")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("urlpatterns "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n    path"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'api/subjects/'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" SubjectView"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("as_view"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("   \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("很显然，上面的做法较之之前讲到的FBV要简单很多。")]),s._v(" "),t("h4",{attrs:{id:"继承modelviewset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#继承modelviewset"}},[s._v("#")]),s._v(" 继承ModelViewSet")]),s._v(" "),t("p",[s._v("如果学科对应的数据接口需要支持GET、POST、PUT、PATCH、DELETE请求来支持对学科资源的获取、新增、更新、删除操作，更为简单的做法是继承"),t("code",[s._v("ModelViewSet")]),s._v("来编写学科视图类。再次修改"),t("code",[s._v("polls/views.py")]),s._v("文件，去掉"),t("code",[s._v("SubjectView")]),s._v("类，添加一个名为"),t("code",[s._v("SubjectViewSet")]),s._v("的类，代码如下所示。")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" rest_framework"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("viewsets "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" ModelViewSet\n\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SubjectViewSet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ModelViewSet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    queryset "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Subject"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("objects"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("all")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    serializer_class "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" SubjectSerializer\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("通过查看"),t("code",[s._v("ModelViewSet")]),s._v("类的源代码可以发现，该类共有6个父类，其中前5个父类分别实现对POST（新增学科）、GET（获取指定学科）、PUT/PATCH（更新学科）、DELETE（删除学科）和GET（获取学科列表）操作的支持，对应的方法分别是"),t("code",[s._v("create")]),s._v("、"),t("code",[s._v("retrieve")]),s._v("、"),t("code",[s._v("update")]),s._v("、"),t("code",[s._v("destroy")]),s._v("和"),t("code",[s._v("list")]),s._v("。由于"),t("code",[s._v("ModelViewSet")]),s._v("的父类中已经实现了这些方法，所以我们几乎没有编写任何代码就完成了学科数据全套接口的开发，我们要做的仅仅是指出如何获取到数据（通过"),t("code",[s._v("queryset")]),s._v("属性指定）以及如何序列化数据（通过"),t("code",[s._v("serializer_class")]),s._v("属性指定），这一点跟上面继承"),t("code",[s._v("APIView")]),s._v("的子类做法是一致的。")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ModelViewSet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mixins"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CreateModelMixin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                   mixins"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("RetrieveModelMixin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                   mixins"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("UpdateModelMixin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                   mixins"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("DestroyModelMixin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                   mixins"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ListModelMixin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                   GenericViewSet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n    A viewset that provides default `create()`, `retrieve()`, `update()`,\n    `partial_update()`, `destroy()` and `list()` actions.\n    """')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pass")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("要使用上面的"),t("code",[s._v("SubjectViewSet")]),s._v("，需要在"),t("code",[s._v("urls.py")]),s._v("文件中进行URL映射。由于"),t("code",[s._v("ModelViewSet")]),s._v("相当于是多个视图函数的汇总，所以不同于之前映射URL的方式，我们需要先创建一个路由器并通过它注册"),t("code",[s._v("SubjectViewSet")]),s._v("，然后将注册成功后生成的URL一并添加到"),t("code",[s._v("urlspattern")]),s._v("列表中，代码如下所示。")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" rest_framework"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("routers "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" DefaultRouter\n\nrouter "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" DefaultRouter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nrouter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("register"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'api/subjects'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" SubjectViewSet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nurlpatterns "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" router"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("urls\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("除了"),t("code",[s._v("ModelViewSet")]),s._v("类外，DRF还提供了一个名为"),t("code",[s._v("ReadOnlyModelViewSet")]),s._v(" 的类，从名字上就可以看出，该类是只读视图的集合，也就意味着，继承该类定制的数据接口只能支持GET请求，也就是获取单个资源和资源列表的请求。")]),s._v(" "),t("h3",{attrs:{id:"数据分页"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据分页"}},[s._v("#")]),s._v(" 数据分页")]),s._v(" "),t("p",[s._v("在使用GET请求获取资源列表时，我们通常不会一次性的加载所有的数据，除非数据量真的很小。大多数获取资源列表的操作都支持数据分页展示，也就说我们可以通过指定页码（或类似于页码的标识）和页面大小（一次加载多少条数据）来获取不同的数据。我们可以通过对"),t("code",[s._v("QuerySet")]),s._v("对象的切片操作来实现分页，也可以利用Django框架封装的"),t("code",[s._v("Paginator")]),s._v("和"),t("code",[s._v("Page")]),s._v("对象来实现分页。使用DRF时，可以在Django配置文件中修改"),t("code",[s._v("REST_FRAMEWORK")]),s._v("并配置默认的分页类和页面大小来实现分页，如下所示。")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("REST_FRAMEWORK "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'PAGE_SIZE'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'DEFAULT_PAGINATION_CLASS'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'rest_framework.pagination.PageNumberPagination'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("除了上面配置的"),t("code",[s._v("PageNumberPagination")]),s._v("分页器之外，DRF还提供了"),t("code",[s._v("LimitOffsetPagination")]),s._v("和"),t("code",[s._v("CursorPagination")]),s._v("分页器，值得一提的是"),t("code",[s._v("CursorPagination")]),s._v("，它可以避免使用页码分页时暴露网站的数据体量，有兴趣的读者可以自行了解。如果不希望使用配置文件中默认的分页设定，可以在视图类中添加一个"),t("code",[s._v("pagination_class")]),s._v("属性来重新指定分页器，通常可以将该属性指定为自定义的分页器，如下所示。")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" rest_framework"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pagination "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" PageNumberPagination\n\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CustomizedPagination")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("PageNumberPagination"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认页面大小")]),s._v("\n    page_size "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 页面大小对应的查询参数")]),s._v("\n    page_size_query_param "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'size'")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 页面大小的最大值")]),s._v("\n    max_page_size "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SubjectView")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ListAPIView"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定如何获取数据")]),s._v("\n    queryset "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Subject"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("objects"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("all")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定如何序列化数据")]),s._v("\n    serializer_class "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" SubjectSerializer\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定如何分页")]),s._v("\n    pagination_class "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" CustomizedPagination\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("如果不希望数据分页，可以将"),t("code",[s._v("pagination_class")]),s._v("属性设置为"),t("code",[s._v("None")]),s._v("来取消默认的分页器。")]),s._v(" "),t("h3",{attrs:{id:"数据筛选"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据筛选"}},[s._v("#")]),s._v(" 数据筛选")]),s._v(" "),t("p",[s._v("如果希望使用CBV定制获取老师信息的数据接口，也可以通过继承"),t("code",[s._v("ListAPIView")]),s._v("来实现。但是因为要通过指定的学科来获取对应的老师信息，因此需要对老师数据进行筛选而不是直接获取所有老师的数据。如果想从请求中获取学科编号并通过学科编号对老师进行筛选，可以通过重写"),t("code",[s._v("get_queryset")]),s._v("方法来做到，代码如下所示。")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TeacherView")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ListAPIView"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    serializer_class "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" TeacherSerializer\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get_queryset")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        queryset "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Teacher"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("objects"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("defer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'subject'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            sno "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("GET"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'sno'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            queryset "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" queryset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("filter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("subject__no"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("sno"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" queryset\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("except")]),s._v(" ValueError"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("raise")]),s._v(" Http404"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'No teachers found.'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("除了上述方式之外，还可以使用三方库"),t("code",[s._v("django-filter")]),s._v("来配合DRF实现对数据的筛选，使用"),t("code",[s._v("django-filter")]),s._v("后，可以通过为视图类配置"),t("code",[s._v("filter-backends")]),s._v("属性并指定使用"),t("code",[s._v("DjangoFilterBackend")]),s._v("来支持数据筛选。在完成上述配置后，可以使用"),t("code",[s._v("filter_fields")]),s._v(" 属性或"),t("code",[s._v("filterset_class")]),s._v("属性来指定如何筛选数据，有兴趣的读者可以自行研究。")])])}),[],!1,null,null,null);t.default=n.exports}}]);