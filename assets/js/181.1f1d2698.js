(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{615:function(s,t,a){"use strict";a.r(t);var n=a(7),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"语言元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语言元素"}},[s._v("#")]),s._v(" 语言元素")]),s._v(" "),t("h4",{attrs:{id:"指令和程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指令和程序"}},[s._v("#")]),s._v(" 指令和程序")]),s._v(" "),t("p",[s._v("计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。其中，运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。我们通常所说的程序实际上就是指令的集合，我们程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。今天我们大多数时候使用的计算机，虽然它们的元器件做工越来越精密，处理能力越来越强大，但究其本质来说仍然属于"),t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84",target:"_blank",rel:"noopener noreferrer"}},[s._v("“冯·诺依曼结构”"),t("OutboundLink")],1),s._v("的计算机。“冯·诺依曼结构”有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法没有实质性的区别，人类因为有十根手指所以使用了十进制（因为在数数时十根手指用完之后就只能进位了，当然凡事都有例外，玛雅人可能是因为长年光着脚的原因把脚趾头也算上了，于是他们使用了二十进制的计数法，在这种计数法的指导下玛雅人的历法就与我们平常使用的历法不一样，而按照玛雅人的历法，2012年是上一个所谓的“太阳纪”的最后一年，而2013年则是新的“太阳纪”的开始，后来这件事情被以讹传讹的方式误传为”2012年是玛雅人预言的世界末日“这种荒诞的说法，今天我们可以大胆的猜测，玛雅文明之所以发展缓慢估计也与使用了二十进制有关）。对于计算机来说，二进制在物理器件上来说是最容易实现的（高电压表示1，低电压表示0），于是在“冯·诺依曼结构”的计算机都使用了二进制。虽然我们并不需要每个程序员都能够使用二进制的思维方式来工作，但是了解二进制以及它与我们生活中的十进制之间的转换关系，以及二进制与八进制和十六进制的转换关系还是有必要的。如果你对这一点不熟悉，可以自行使用"),t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6",target:"_blank",rel:"noopener noreferrer"}},[s._v("维基百科"),t("OutboundLink")],1),s._v("或者"),t("a",{attrs:{href:"https://baike.baidu.com",target:"_blank",rel:"noopener noreferrer"}},[s._v("百度百科"),t("OutboundLink")],1),s._v("科普一下。")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("说明")]),s._v("：近期关于"),t("strong",[s._v("量子计算机")]),s._v("的研究已经被推倒了风口浪尖，量子计算机基于量子力学进行运算，使用量子瞬移的方式来传递信息。2018年6月，Intel宣布开发出新款量子芯片并通过了在接近绝对零度环境下的测试；2019年，IBM和Google都推出了自己的量子计算机。")])]),s._v(" "),t("h3",{attrs:{id:"变量和类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量和类型"}},[s._v("#")]),s._v(" 变量和类型")]),s._v(" "),t("p",[s._v("在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。")]),s._v(" "),t("ul",[t("li",[s._v("整型：Python中可以处理任意大小的整数（Python 2.x中有"),t("code",[s._v("int")]),s._v("和"),t("code",[s._v("long")]),s._v("两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有int这一种了），而且支持二进制（如"),t("code",[s._v("0b100")]),s._v("，换算成十进制是4）、八进制（如"),t("code",[s._v("0o100")]),s._v("，换算成十进制是64）、十进制（"),t("code",[s._v("100")]),s._v("）和十六进制（"),t("code",[s._v("0x100")]),s._v("，换算成十进制是256）的表示法。")]),s._v(" "),t("li",[s._v("浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如"),t("code",[s._v("123.456")]),s._v("）之外还支持科学计数法（如"),t("code",[s._v("1.23456e2")]),s._v("）。")]),s._v(" "),t("li",[s._v("字符串型：字符串是以单引号或双引号括起来的任意文本，比如"),t("code",[s._v("'hello'")]),s._v("和"),t("code",[s._v('"hello"')]),s._v(",字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。")]),s._v(" "),t("li",[s._v("布尔型：布尔值只有"),t("code",[s._v("True")]),s._v("、"),t("code",[s._v("False")]),s._v("两种值，要么是"),t("code",[s._v("True")]),s._v("，要么是"),t("code",[s._v("False")]),s._v("，在Python中，可以直接用"),t("code",[s._v("True")]),s._v("、"),t("code",[s._v("False")]),s._v("表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如"),t("code",[s._v("3 < 5")]),s._v("会产生布尔值"),t("code",[s._v("True")]),s._v("，而"),t("code",[s._v("2 == 1")]),s._v("会产生布尔值"),t("code",[s._v("False")]),s._v("）。")]),s._v(" "),t("li",[s._v("复数型：形如"),t("code",[s._v("3+5j")]),s._v("，跟数学上的复数表示一样，唯一不同的是虚部的"),t("code",[s._v("i")]),s._v("换成了"),t("code",[s._v("j")]),s._v("。实际上，这个类型并不常用，大家了解一下就可以了。")])]),s._v(" "),t("h4",{attrs:{id:"变量命名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量命名"}},[s._v("#")]),s._v(" 变量命名")]),s._v(" "),t("p",[s._v("对于每个变量我们需要给它取一个名字，就如同我们每个人都有属于自己的响亮的名字一样。在Python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。")]),s._v(" "),t("ul",[t("li",[s._v("硬性规则：\n"),t("ul",[t("li",[s._v("变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。")]),s._v(" "),t("li",[s._v("大小写敏感（大写的"),t("code",[s._v("a")]),s._v("和小写的"),t("code",[s._v("A")]),s._v("是两个不同的变量）。")]),s._v(" "),t("li",[s._v("不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。")])])]),s._v(" "),t("li",[s._v("PEP 8要求：\n"),t("ul",[t("li",[s._v("用小写字母拼写，多个单词用下划线连接。")]),s._v(" "),t("li",[s._v("受保护的实例属性用单个下划线开头（后面会讲到）。")]),s._v(" "),t("li",[s._v("私有的实例属性用两个下划线开头（后面会讲到）。")])])])]),s._v(" "),t("p",[s._v("当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到见名知意也是非常重要的。")]),s._v(" "),t("h4",{attrs:{id:"变量的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量的使用"}},[s._v("#")]),s._v(" 变量的使用")]),s._v(" "),t("p",[s._v("下面通过几个例子来说明变量的类型和变量使用。")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n使用变量保存数据并进行加减乘除运算\n"""')]),s._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("321")]),s._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 333")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 309")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3852")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 26.75")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("在Python中可以使用"),t("code",[s._v("type")]),s._v("函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念是一致的，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。如果暂时不理解这个概念也不要紧，我们会在后续的章节中专门讲解函数的定义和使用。")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n使用type()检查变量的类型\n"""')]),s._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12.345")]),s._v("\nc "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5j")]),s._v("\nd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello, world'")]),s._v("\ne "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# <class 'int'>")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# <class 'float'>")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# <class 'complex'>")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# <class 'str'>")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# <class 'bool'>")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("可以使用Python中内置的函数对变量类型进行转换。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("int()")]),s._v("：将一个数值或字符串转换成整数，可以指定进制。")]),s._v(" "),t("li",[t("code",[s._v("float()")]),s._v("：将一个字符串转换成浮点数。")]),s._v(" "),t("li",[t("code",[s._v("str()")]),s._v("：将指定的对象转换成字符串形式，可以指定编码。")]),s._v(" "),t("li",[t("code",[s._v("chr()")]),s._v("：将整数转换成该编码对应的字符串（一个字符）。")]),s._v(" "),t("li",[t("code",[s._v("ord()")]),s._v("：将字符串（一个字符）转换成对应的编码（整数）。")])]),s._v(" "),t("p",[s._v("下面的代码通过键盘输入两个整数来实现对两个整数的算术运算。")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n使用input()函数获取键盘输入(字符串)\n使用int()函数将输入的字符串转换成整数\n使用print()函数输出带占位符的字符串\n"""')]),s._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("input")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a = '")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("input")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b = '")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%d + %d = %d'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%d - %d = %d'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%d * %d = %d'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%d / %d = %f'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%d // %d = %d'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%d %% %d = %d'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%d ** %d = %d'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("blockquote",[t("p",[t("strong",[s._v("说明")]),s._v("：上面的print函数中输出的字符串使用了占位符语法，其中"),t("code",[s._v("%d")]),s._v("是整数的占位符，"),t("code",[s._v("%f")]),s._v("是小数的占位符，"),t("code",[s._v("%%")]),s._v("表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成"),t("code",[s._v("%%")]),s._v("），字符串之后的"),t("code",[s._v("%")]),s._v("后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。")])]),s._v(" "),t("h3",{attrs:{id:"运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[s._v("#")]),s._v(" 运算符")]),s._v(" "),t("p",[s._v("Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。除了我们之前已经用过的赋值运算符和算术运算符，我们稍后会陆续讲到其他运算符的使用。")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("运算符")]),s._v(" "),t("th",[s._v("描述")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",[s._v("[]")]),s._v(" "),t("code",[s._v("[:]")])]),s._v(" "),t("td",[s._v("下标，切片")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("**")])]),s._v(" "),t("td",[s._v("指数")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("~")]),s._v(" "),t("code",[s._v("+")]),s._v(" "),t("code",[s._v("-")])]),s._v(" "),t("td",[s._v("按位取反, 正负号")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("*")]),s._v(" "),t("code",[s._v("/")]),s._v(" "),t("code",[s._v("%")]),s._v(" "),t("code",[s._v("//")])]),s._v(" "),t("td",[s._v("乘，除，模，整除")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("+")]),s._v(" "),t("code",[s._v("-")])]),s._v(" "),t("td",[s._v("加，减")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v(">>")]),s._v(" "),t("code",[s._v("<<")])]),s._v(" "),t("td",[s._v("右移，左移")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("&")])]),s._v(" "),t("td",[s._v("按位与")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("^")]),s._v(" "),t("code",[s._v("\\|")])]),s._v(" "),t("td",[s._v("按位异或，按位或")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("<=")]),s._v(" "),t("code",[s._v("<")]),s._v(" "),t("code",[s._v(">")]),s._v(" "),t("code",[s._v(">=")])]),s._v(" "),t("td",[s._v("小于等于，小于，大于，大于等于")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("==")]),s._v(" "),t("code",[s._v("!=")])]),s._v(" "),t("td",[s._v("等于，不等于")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("is")]),s._v(" "),t("code",[s._v("is not")])]),s._v(" "),t("td",[s._v("身份运算符")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("in")]),s._v(" "),t("code",[s._v("not in")])]),s._v(" "),t("td",[s._v("成员运算符")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("not")]),s._v(" "),t("code",[s._v("or")]),s._v(" "),t("code",[s._v("and")])]),s._v(" "),t("td",[s._v("逻辑运算符")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("=")]),s._v(" "),t("code",[s._v("+=")]),s._v(" "),t("code",[s._v("-=")]),s._v(" "),t("code",[s._v("*=")]),s._v(" "),t("code",[s._v("/=")]),s._v(" "),t("code",[s._v("%=")]),s._v(" "),t("code",[s._v("//=")]),s._v(" "),t("code",[s._v("**=")]),s._v(" "),t("code",[s._v("&=")]),s._v(" "),t("code",[s._v("|=")]),s._v(" "),t("code",[s._v("^=")]),s._v(" "),t("code",[s._v(">>=")]),s._v(" "),t("code",[s._v("<<=")])]),s._v(" "),t("td",[s._v("（复合）赋值运算符")])])])]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("说明：")]),s._v(" 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。")])]),s._v(" "),t("h4",{attrs:{id:"赋值运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符"}},[s._v("#")]),s._v(" 赋值运算符")]),s._v(" "),t("p",[s._v("赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n赋值运算符和复合赋值运算符\n"""')]),s._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" b        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 相当于：a = a + b")]),s._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*=")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 相当于：a = a * (a + 2)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 算一下这里会输出什么")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"比较运算符和逻辑运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符和逻辑运算符"}},[s._v("#")]),s._v(" 比较运算符和逻辑运算符")]),s._v(" "),t("p",[s._v("比较运算符有的地方也称为关系运算符，包括"),t("code",[s._v("==")]),s._v("、"),t("code",[s._v("!=")]),s._v("、"),t("code",[s._v("<")]),s._v("、"),t("code",[s._v(">")]),s._v("、"),t("code",[s._v("<=")]),s._v("、"),t("code",[s._v(">=")]),s._v("，我相信没有什么好解释的，大家一看就能懂，唯一需要提醒的是比较相等用的是"),t("code",[s._v("==")]),s._v("，请注意这个地方是两个等号，因为"),t("code",[s._v("=")]),s._v("是赋值运算符，我们在上面刚刚讲到过，"),t("code",[s._v("==")]),s._v("才是比较相等的比较运算符。比较运算符会产生布尔值，要么是"),t("code",[s._v("True")]),s._v("要么是"),t("code",[s._v("False")]),s._v("。")]),s._v(" "),t("p",[s._v("逻辑运算符有三个，分别是"),t("code",[s._v("and")]),s._v("、"),t("code",[s._v("or")]),s._v("和"),t("code",[s._v("not")]),s._v("。"),t("code",[s._v("and")]),s._v("字面意思是“而且”，所以"),t("code",[s._v("and")]),s._v("运算符会连接两个布尔值，如果两个布尔值都是"),t("code",[s._v("True")]),s._v("，那么运算的结果就是"),t("code",[s._v("True")]),s._v("；左右两边的布尔值有一个是"),t("code",[s._v("False")]),s._v("，最终的运算结果就是"),t("code",[s._v("False")]),s._v("。相信大家已经想到了，如果"),t("code",[s._v("and")]),s._v("左边的布尔值是"),t("code",[s._v("False")]),s._v("，不管右边的布尔值是什么，最终的结果都是"),t("code",[s._v("False")]),s._v("，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在"),t("code",[s._v("and")]),s._v("运算符左边为"),t("code",[s._v("False")]),s._v("的情况下，右边的表达式根本不会执行。"),t("code",[s._v("or")]),s._v("字面意思是“或者”，所以"),t("code",[s._v("or")]),s._v("运算符也会连接两个布尔值，如果两个布尔值有任意一个是"),t("code",[s._v("True")]),s._v("，那么最终的结果就是"),t("code",[s._v("True")]),s._v("。当然，"),t("code",[s._v("or")]),s._v("运算符也是有短路功能的，在它左边的布尔值为"),t("code",[s._v("True")]),s._v("的情况下，右边的表达式根本不会执行。"),t("code",[s._v("not")]),s._v("运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，后面的布尔值如果是"),t("code",[s._v("True")]),s._v("运算结果就是"),t("code",[s._v("False")]),s._v("，而后面的布尔值如果是"),t("code",[s._v("False")]),s._v("则运算结果就是"),t("code",[s._v("True")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n比较运算符和逻辑运算符的使用\n"""')]),s._v("\nflag0 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nflag1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\nflag2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nflag3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" flag1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" flag2\nflag4 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" flag1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" flag2\nflag5 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'flag0 ='")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" flag0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# flag0 = True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'flag1 ='")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" flag1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# flag1 = True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'flag2 ='")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" flag2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# flag2 = False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'flag3 ='")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" flag3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# flag3 = False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'flag4 ='")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" flag4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# flag4 = True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'flag5 ='")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" flag5"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# flag5 = False")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("blockquote",[t("p",[t("strong",[s._v("说明")]),s._v("：比较运算符的优先级高于赋值运算符，所以"),t("code",[s._v("flag0 = 1 == 1")]),s._v("先做"),t("code",[s._v("1 == 1")]),s._v("产生布尔值"),t("code",[s._v("True")]),s._v("，再将这个值赋值给变量"),t("code",[s._v("flag0")]),s._v("。"),t("code",[s._v("print")]),s._v("函数可以输出多个值，多个值之间可以用"),t("code",[s._v(",")]),s._v("进行分隔，输出的内容之间默认以空格分开。")])]),s._v(" "),t("h3",{attrs:{id:"练习"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[s._v("#")]),s._v(" 练习")]),s._v(" "),t("h4",{attrs:{id:"练习1-华氏温度转换为摄氏温度。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习1-华氏温度转换为摄氏温度。"}},[s._v("#")]),s._v(" 练习1：华氏温度转换为摄氏温度。")]),s._v(" "),t("blockquote",[t("p",[s._v("提示：华氏温度到摄氏温度的转换公式为：$C=(F - 32) \\div 1.8$。")])]),s._v(" "),t("p",[s._v("参考答案：")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n将华氏温度转换为摄氏温度\n"""')]),s._v("\nf "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("float")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("input")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'请输入华氏温度: '")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nc "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("f "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.8")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%.1f华氏度 = %.1f摄氏度'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("f"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("blockquote",[t("p",[t("strong",[s._v("说明")]),s._v("：在使用"),t("code",[s._v("print")]),s._v("函数输出时，也可以对字符串内容进行格式化处理，上面"),t("code",[s._v("print")]),s._v("函数中的字符串"),t("code",[s._v("%.1f")]),s._v("是一个占位符，稍后会由一个"),t("code",[s._v("float")]),s._v("类型的变量值替换掉它。同理，如果字符串中有"),t("code",[s._v("%d")]),s._v("，后面可以用一个"),t("code",[s._v("int")]),s._v("类型的变量值替换掉它，而"),t("code",[s._v("%s")]),s._v("会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中"),t("code",[s._v("{f:.1f}")]),s._v("和"),t("code",[s._v("{c:.1f}")]),s._v("可以先看成是"),t("code",[s._v("{f}")]),s._v("和"),t("code",[s._v("{c}")]),s._v("，表示输出时会用变量"),t("code",[s._v("f")]),s._v("和变量"),t("code",[s._v("c")]),s._v("的值替换掉这两个占位符，后面的"),t("code",[s._v(":.1f")]),s._v("表示这是一个浮点数，小数点后保留1位有效数字。")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string-interpolation"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v("f'")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("f"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token format-spec"}},[s._v(".1f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("华氏度 = ")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token format-spec"}},[s._v(".1f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("摄氏度'")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("h4",{attrs:{id:"练习2-输入圆的半径计算计算周长和面积。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习2-输入圆的半径计算计算周长和面积。"}},[s._v("#")]),s._v(" 练习2：输入圆的半径计算计算周长和面积。")]),s._v(" "),t("p",[s._v("参考答案：")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n输入半径计算圆的周长和面积\n"""')]),s._v("\nradius "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("float")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("input")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'请输入圆的半径: '")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nperimeter "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.1416")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" radius\narea "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.1416")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" radius "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" radius\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'周长: %.2f'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" perimeter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'面积: %.2f'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" area"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h4",{attrs:{id:"练习3-输入年份判断是不是闰年。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习3-输入年份判断是不是闰年。"}},[s._v("#")]),s._v(" 练习3：输入年份判断是不是闰年。")]),s._v(" "),t("p",[s._v("参考答案：")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n输入年份 如果是闰年输出True 否则输出False\n"""')]),s._v("\nyear "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("input")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'请输入年份: '")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果代码太长写成一行不便于阅读 可以使用\\对代码进行折行")]),s._v("\nis_leap "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" year "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" year "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" \\\n          year "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("400")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("is_leap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("blockquote",[t("p",[t("strong",[s._v("说明")]),s._v("：比较运算符会产生布尔值，而逻辑运算符"),t("code",[s._v("and")]),s._v("和"),t("code",[s._v("or")]),s._v("会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出"),t("code",[s._v("True")]),s._v("，平年输出"),t("code",[s._v("False")]),s._v("。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);