(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{338:function(t,a,e){"use strict";e.r(a);var s=e(7),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"创建项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建项目"}},[t._v("#")]),t._v(" 创建项目")]),t._v(" "),a("h3",{attrs:{id:"安装create-react-app"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装create-react-app"}},[t._v("#")]),t._v(" 安装create-react-app")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-g")]),t._v(" create-react-app\n")])])]),a("h3",{attrs:{id:"创建项目-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建项目-2"}},[t._v("#")]),t._v(" 创建项目")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ create-react-app your-app "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#注意命名方式")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("tips:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("默认创建的是js项目，如果需要使用ts项目，可以加上template")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ create-react-app your-app "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-template")]),t._v(" typescript\n")])])])]),t._v(" "),a("li",[a("p",[t._v("如果不想全局安装，可以使用npx")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ npx create-react-app your-app\t也可以实现相同的效果\n")])])])])])]),t._v(" "),a("h2",{attrs:{id:"使用yarn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用yarn"}},[t._v("#")]),t._v(" 使用yarn")]),t._v(" "),a("ul",[a("li",[t._v("安装 npm install -g yarn")]),t._v(" "),a("li",[t._v("查看版本 yarn --version")]),t._v(" "),a("li",[t._v("查看镜像 yarn config get registry")]),t._v(" "),a("li",[t._v("设置淘宝源 yarn config set registry https://registry.npm.taobao.org -g")]),t._v(" "),a("li",[t._v("安装依赖 yarn add 包名")])]),t._v(" "),a("h2",{attrs:{id:"react的特点和优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react的特点和优势"}},[t._v("#")]),t._v(" React的特点和优势")]),t._v(" "),a("p",[a("strong",[t._v("(1) 虚拟DOM")])]),t._v(" "),a("p",[t._v("我们以前操作dom的方式是通过document.getElementById()的方式，这样的过程实际上是先去读取html的dom结构，将结构转换成变量，再进行操作。而reactjs定义了一套变量形式的dom模型，一切操作和换算直接在变量中，这样减少了操作真实dom，性能真实相当的高，和主流MVC框架有本质的区别，并不和dom打交道")]),t._v(" "),a("p",[a("strong",[t._v("(2) 组件系统")])]),t._v(" "),a("p",[t._v("react最核心的思想是将页面中任何一个区域或者元素都可以看做一个组件 component")]),t._v(" "),a("p",[t._v("那么什么是组件呢？")]),t._v(" "),a("p",[t._v("组件指的就是同时包含了html、css、js、image元素的聚合体")]),t._v(" "),a("p",[t._v("使用react开发的核心就是将页面拆分成若干个组件，并且react一个组件中同时耦合了css、js、image，这种模式整个颠覆了过去的传统的方式")]),t._v(" "),a("p",[a("strong",[t._v("(3) 单向数据流")])]),t._v(" "),a("p",[t._v("其实reactjs的核心内容就是数据绑定，所谓数据绑定指的是只要将一些服务端的数据和前端页面绑定好，开发者只关注实现业务就行了")]),t._v(" "),a("p",[a("strong",[t._v("(4) JSX  语法")])]),t._v(" "),a("p",[t._v("在vue中，我们使用render函数来构建组件的dom结构性能较高，因为省去了查找和编译模板的过程，但是在render中利用createElement创建结构的时候代码可读性较低，较为复杂，此时可以利用jsx语法来在render中创建dom，解决这个问题，但是前提是需要使用工具来编译jsx")]),t._v(" "),a("h2",{attrs:{id:"diff算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#diff算法"}},[t._v("#")]),t._v(" diff算法")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("什么是diff算法")]),t._v(" "),a("p",[t._v("diff算法是"),a("code",[t._v("调和的具体实现")])])]),t._v(" "),a("li",[a("p",[t._v("diff策略")]),t._v(" "),a("ol",[a("li",[t._v("同级比较")]),t._v(" "),a("li",[t._v("组件比较\n"),a("ul",[a("li",[t._v("没变，直接往下比")]),t._v(" "),a("li",[t._v("使用shouldComponentUpdate判断是否需要更相信")])])]),t._v(" "),a("li",[t._v("key比较")])]),t._v(" "),a("p",[t._v("react用三大策略将O(n^3)复杂度转换为O(n)复杂度")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("策略1：tree diff")]),t._v(" "),a("p",[t._v("Web UI中Dom节点跨层级的移动操作特别少，可以忽略不计")])]),t._v(" "),a("li",[a("p",[t._v("策略2: component diff")]),t._v(" "),a("p",[t._v("拥有相同类的两个组件，生成相似的树形结构")]),t._v(" "),a("p",[t._v("拥有不同类的两个组件，生成不同的树形结构")])]),t._v(" "),a("li",[a("p",[t._v("策略3： element diff")]),t._v(" "),a("p",[t._v("对于同一层级的一组子节点，通过唯一id区分(比较key )")])])])])]),t._v(" "),a("h2",{attrs:{id:"简单的react代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单的react代码"}},[t._v("#")]),t._v(" 简单的react代码")]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 从 react 的包当中引入了 React。只要你要写 React.js 组件就必须引入React, 因为react里有一种语法叫JSX，稍后会讲到JSX，要写JSX，就必须引入React\nimport React from 'react'\n// ReactDOM 可以帮助我们把 React 组件渲染到页面上去，没有其它的作用了。它是从 react-dom 中引入的，而不是从 react 引入。\nimport ReactDOM from 'react-dom'\n\n// ReactDOM里有一个render方法，功能就是把组件渲染并且构造 DOM 树，然后插入到页面上某个特定的元素上\nReactDOM.render(\n// 这里就比较奇怪了，它并不是一个字符串，看起来像是纯 HTML 代码写在 JavaScript 代码里面。语法错误吗？这并不是合法的 JavaScript 代码, “在 JavaScript 写的标签的”语法叫 JSX- JavaScript XML。\n  <h1>欢迎进入React的世界</h1>,\n// 渲染到哪里\n  document.getElementById('root')\n)\n")])])]),a("h2",{attrs:{id:"react元素与组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react元素与组件"}},[t._v("#")]),t._v(" react元素与组件")]),t._v(" "),a("blockquote",[a("p",[t._v("react-dom在整个项目中，只需要在index.tsx中引入一次就够了，其他地方不需要引入")])]),t._v(" "),a("h3",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[t._v("#")]),t._v(" 区别")]),t._v(" "),a("p",[t._v("在react中，大小写敏感，大写的为组件名称，小写的为标签元素")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("组件")]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import React from 'react';\nimport ReactDOM from 'react-dom';\nconst app = <div>hello react</div> // 注意这里的定义方式(以纯html定义，无法使用函数定义)\nReactDOM.render(\n  app,\n  document.getElementById('root')\n);\n")])])])]),t._v(" "),a("li",[a("p",[t._v("元素")]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import React from 'react';\nimport ReactDOM from 'react-dom';\nconst App = () => <div>hello react</div> // 注意这里的定义方式(以函数的形式定义)\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"组件传参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件传参"}},[t._v("#")]),t._v(" 组件传参")]),t._v(" "),a("h4",{attrs:{id:"函数组件传参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数组件传参"}},[t._v("#")]),t._v(" 函数组件传参")]),t._v(" "),a("blockquote",[a("p",[t._v("JSX中，变量使用大括号进行识别、使用")]),t._v(" "),a("p",[t._v("在 { } 可以直接写js语句")])]),t._v(" "),a("h5",{attrs:{id:"传单个参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传单个参数"}},[t._v("#")]),t._v(" 传单个参数")]),t._v(" "),a("p",[t._v("可以直接使用prop接收")]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import ReactDOM from 'react-dom';\nconst app =(prop: any) => <div>hello react!{prop}</div>\nReactDOM.render(\n  app('test'),\n  document.getElementById('root')\n);\n")])])]),a("h5",{attrs:{id:"传多个参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传多个参数"}},[t._v("#")]),t._v(" 传多个参数")]),t._v(" "),a("p",[t._v("可以使用对象或者数据等复杂类型传参")]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import React from 'react';\nimport ReactDOM from 'react-dom';\nconst app =(prop: any) => <div>my name is {prop.name}, I'm {prop.age} age</div>\nReactDOM.render(\n  app({name: 'riverside joy', age: 8}), // 使用对象传参\n  document.getElementById('root')\n);\n")])])]),a("h5",{attrs:{id:"使用组件形式传参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用组件形式传参"}},[t._v("#")]),t._v(" 使用组件形式传参")]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import React from 'react';\nimport ReactDOM from 'react-dom';\nconst App =(prop: any) => <div>my name is {prop.name}</div>\nReactDOM.render(\n  <App name=\"reverside joy\"/>, // 使用对象传参\n  document.getElementById('root')\n);\n")])])]),a("h4",{attrs:{id:"类组件传参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类组件传参"}},[t._v("#")]),t._v(" 类组件传参")]),t._v(" "),a("blockquote",[a("p",[t._v("类组件中，"),a("strong",[a("code",[t._v("必须要有render方法")])]),t._v("，同时又是一个生命周期钩子函数")])]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import React from 'react';\nimport ReactDOM from 'react-dom';\n// 2.使用interface完全声明定义属性类型\ninterface MyProps {\n\tname:string; // 必要属性\n\tage ?: string; //可选属性\n\treadonly id ?: string; // 只读属性\n}\nclass App extends React.Component<MyProps> {\n  render() {\n    return (<div>my name is {this.props.name} </div>)\n  }\n}\nReactDOM.render(\n  <App name=\"test\"/>, // 使用对象传参\n  document.getElementById('root')\n);\n")])])]),a("h3",{attrs:{id:"组件分文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件分文件"}},[t._v("#")]),t._v(" 组件分文件")]),t._v(" "),a("h4",{attrs:{id:"类组件形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类组件形式"}},[t._v("#")]),t._v(" 类组件形式")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("组件写法")]),t._v(" "),a("ol",[a("li",[t._v("先引入react")]),t._v(" "),a("li",[t._v("然后类组件的通用写法")]),t._v(" "),a("li",[a("code",[t._v("最后要使用export default暴露出去")])])]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import React from "react";\nclass App extends React.Component {\n  render() {\n    return(<div>这是组件</div>)\n  }\n}\nexport default App\n')])])])]),t._v(" "),a("li",[a("p",[t._v("入口文件写法")]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// index.tsx\nimport ReactDOM from 'react-dom';\nimport App from './01-get-start/component'; // 引入组件\nReactDOM.render(\n  <App />, // 使用对象传参\n  document.getElementById('root')\n);\n")])])])])]),t._v(" "),a("h4",{attrs:{id:"函数组件形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数组件形式"}},[t._v("#")]),t._v(" 函数组件形式")]),t._v(" "),a("p",[t._v("此处将两个组件写在一起了，分别是Header组件和App组件")]),t._v(" "),a("p",[t._v("App组件又作为入口文件index.tsx的组件")]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import React from "react";\nconst Header = () => {\n    return(<header>是头部</header>)\n}\nclass App extends React.Component {\n  render() {\n    return(\n      <Header/ >\n    )\n  }\n}\nexport default App\n')])])]),a("h4",{attrs:{id:"组件嵌套"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件嵌套"}},[t._v("#")]),t._v(" 组件嵌套")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("最里面的组件")]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import React, {Component} from "react";\nclass Header extends Component{\n  render() {\n    return(<header>头部</header>)\n  }\n}\nexport default Header\n')])])])]),t._v(" "),a("li",[a("p",[t._v("倒数第二层组件")]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import React from \"react\";\nimport Header from './header'\nclass App extends React.Component {\n  render() {\n    return(<Header />)\n  }\n}\nexport default App\n")])])])]),t._v(" "),a("li",[a("p",[t._v("最外层index写法")]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './01-get-start/component';\nReactDOM.render(\n  <App />, // 使用对象传参\n  document.getElementById('root')\n);\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"return函数中包含多个dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#return函数中包含多个dom"}},[t._v("#")]),t._v(" return函数中包含多个dom")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("使用Fragment标签")]),t._v(" "),a("blockquote",[a("p",[t._v("Tips: Fragment标签，要从react中解构出来")])]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import React, {Component, Fragment} from "react";\nclass App extends React.Component {\n  render() {\n    return(\n      <Fragment>\n        <Header/ >\n        <Main />\n      </Fragment>\n    )\n  }\n}\n')])])])]),t._v(" "),a("li",[a("p",[t._v("使用空标签")]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class App extends React.Component {\n  render() {\n    return(\n      <>\n        <Header/ >\n        <Main />\n      </>\n    )\n  }\n}\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"dom的样式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom的样式"}},[t._v("#")]),t._v(" Dom的样式")]),t._v(" "),a("blockquote",[a("p",[t._v("如果使用typescript项目，引入css文件，可能出现找不到css文件的情况")]),t._v(" "),a("p",[t._v("解决方案：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("创建 "),a("code",[t._v("globals.d.ts")])]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("declare")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*.css'")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("打开tsconfig.json")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"include"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./**/*.ts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"exclude"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node_modules/**/*"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])])])]),t._v(" "),a("blockquote",[a("p",[t._v("总结：")]),t._v(" "),a("ol",[a("li",[t._v("行内样式，使用双大括号")]),t._v(" "),a("li",[t._v("className关键子，使用css定义的字符串类名")]),t._v(" "),a("li",[t._v("cssnames包，使用单大括号 + 包和样式绑定的实体名称")])])]),t._v(" "),a("h3",{attrs:{id:"行内样式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行内样式"}},[t._v("#")]),t._v(" 行内样式")]),t._v(" "),a("ol",[a("li",[t._v("行内样式要求CSS必须是一个对象")]),t._v(" "),a("li",[t._v("react对于js的识别是使用大括号")]),t._v(" "),a("li",[t._v("对于多单词的CSS属性，要使用小驼峰的写法，如fontSize")])]),t._v(" "),a("p",[t._v("所以最外层大括号是react对js的识别，里层的大括号是react要求的对象")]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const App = () => {\n  return (\n    <div style={{color: 'red', fontSize: '50px'}}>测试页面</div>\n  )\n}\nexport default App\n")])])]),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const styleObj = {\n    fontSize: '16px'\n}\nconst redObj = {\n    color: 'red'\n}\nconst App = () => {\n  return (\n    <div style={1 > 2 ? styleObj : redObj}>测试页面</div>\n  )\n}\nexport default App\n")])])]),a("h3",{attrs:{id:"使用classname关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用classname关键字"}},[t._v("#")]),t._v(" 使用className关键字")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("step1: 定义css样式")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".fontStyle")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" green"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 16px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("step2: 引入css文件并"),a("code",[t._v("使用className关键字")])]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import './02-test.css'\nconst App = () => {\n  return (\n    <div className=\"fontStyle\">测试页面</div>\n  )\n}\nexport default App\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"不同条件显示不同样式-classnames包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同条件显示不同样式-classnames包"}},[t._v("#")]),t._v(" 不同条件显示不同样式：classnames包")]),t._v(" "),a("p",[t._v("有时候需要根据不同的条件添加不同的样式，比如：完成状态，完成是绿色，未完成是红色。那么这种情况下，我们推荐使用"),a("a",{attrs:{href:"https://www.npmjs.com/package/classnames",target:"_blank",rel:"noopener noreferrer"}},[t._v("classnames"),a("OutboundLink")],1),t._v("这个包")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("安装")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("cnpm "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-D")]),t._v(" classnames\n")])])])]),t._v(" "),a("li",[a("p",[t._v("使用")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("定义css文件")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".fontStyle")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" red"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 16px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("引入classNames(用于根据条件显示css样式)和style")])]),t._v(" "),a("li",[a("p",[t._v("引入定义好的css文件，并设置别名")])]),t._v(" "),a("li",[a("p",[t._v("3.将css样式进行绑定")])])]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 1.引入npm包的固定写法\nimport classNames from 'classnames/bind';\n// 2.引入自己定义的css文件\nimport styles from './02-test.css';\nconst App = () => {\n  // 3.将css样式进行绑定\n  let className = cx({\n    fontStyle: false\n  })\n  return (\n    <div className={className}>测试页面</div>\n  )\n}\nexport default App\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"css-in-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-in-js"}},[t._v("#")]),t._v(" css  in js")])])}),[],!1,null,null,null);a.default=r.exports}}]);