(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{541:function(n,t,a){"use strict";a.r(t);var e=a(7),s=Object(e.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[n._v("#")]),n._v(" 说明")]),n._v(" "),t("p",[t("code",[n._v("new Function()")]),n._v(" 是 JavaScript 中的一个构造函数，它可以实例化一个新的函数对象并返回。该函数对象可以使用传递给 "),t("code",[n._v("new Function()")]),n._v(" 的字符串参数作为函数体，并使用其他传递给它的参数作为函数参数，从而动态创建一个可执行的函数")]),n._v(" "),t("h2",{attrs:{id:"参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[n._v("#")]),n._v(" 参数")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("new Function ([arg1[, arg2[, ...argn]],] functionBody)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])]),t("p",[n._v("例子：")]),n._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("const")]),n._v(" add "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[n._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[n._v("'b'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[n._v("'return a + b;'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 5")]),n._v("\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br")])]),t("p",[t("code",[n._v("'a'")]),n._v(" 和 "),t("code",[n._v("'b'")]),n._v(" 是函数的参数列表，")]),n._v(" "),t("p",[t("code",[n._v("'return a + b;'")]),n._v(" 是函数的实现代码。")]),n._v(" "),t("p",[n._v("然后，该函数对象被赋值给变量 "),t("code",[n._v("add")]),n._v(" 。")]),n._v(" "),t("p",[n._v("最后，调用 "),t("code",[n._v("add(2, 3)")]),n._v(" 执行该函数，返回 "),t("code",[n._v("5")]),n._v(" 。")]),n._v(" "),t("h2",{attrs:{id:"new-function-和-eval-的主要区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new-function-和-eval-的主要区别"}},[n._v("#")]),n._v(" new Function() 和 eval()的主要区别")]),n._v(" "),t("ol",[t("li",[t("p",[n._v("执行方式不同： "),t("code",[n._v("new Function()")]),n._v(" 构造函数创建的函数对象只会在其被调用时才会执行，而 "),t("code",[n._v("eval()")]),n._v(" 函数则立即执行其参数中的 JavaScript 代码，并返回其中的值（如果有）。")])]),n._v(" "),t("li",[t("p",[n._v("作用域不同： "),t("code",[n._v("new Function()")]),n._v(" 构造函数创建的函数对象没有访问父作用域的能力，只能访问自己的局部变量和全局变量；而 "),t("code",[n._v("eval()")]),n._v(" 函数则可以访问其自身函数作用域和父作用域的变量和函数，因此具有更高的灵活性和不可预知性。")])]),n._v(" "),t("li",[t("p",[n._v("安全性不同：由于 "),t("code",[n._v("new Function()")]),n._v(" 构造函数定义的函数对象是在严格的函数作用域下运行的，因此其代码不会改变或访问父作用域中的变量。因此，使用 "),t("code",[n._v("new Function()")]),n._v(" 构造函数创建函数对象时，可以更好地保证其安全性。而 "),t("code",[n._v("eval()")]),n._v(" 函数则无法保证代码的安全性，因为它可以访问并改变父作用域中的变量，从而具有更高的攻击风险。")]),n._v(" "),t("h3",{attrs:{id:"new-function-性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new-function-性能"}},[n._v("#")]),n._v(" new Function 性能")]),n._v(" "),t("p",[n._v("与 "),t("code",[n._v("eval()")]),n._v(" 相比， "),t("code",[n._v("new Function()")]),n._v(" 函数具有更好的性能。这是因为 "),t("code",[n._v("new Function()")]),n._v(" 函数在编译时会创建一个新的函数对象，不会像 "),t("code",[n._v("eval()")]),n._v(" 函数一样将代码注入到当前作用域中。相反，它只在需要时才编译并执行代码，因此在常规情况下， "),t("code",[n._v("new Function()")]),n._v(" 的性能比 "),t("code",[n._v("eval()")]),n._v(" 更好。")]),n._v(" "),t("p",[n._v("另外，由于 "),t("code",[n._v("new Function()")]),n._v(" 在全局作用域外部定义新的函数，可以更好地掌控执行环境，因此我们可以利用 "),t("code",[n._v("new Function()")]),n._v(" 函数的局部性，使其不仅取代 "),t("code",[n._v("eval()")]),n._v(" ，而且在一定程度上比自执行函数和即时函数表达式引入更少的全局变量。")]),n._v(" "),t("p",[n._v("不过需要注意的是，如果在一个循环中频繁地使用 "),t("code",[n._v("new Function()")]),n._v(" ，或者在函数体内创建过多的嵌套函数，可能会导致性能下降。因此，当需要使用 "),t("code",[n._v("new Function()")]),n._v(" 函数时，应该尽量减少不必要的重复调用，并注意代码的优化和缓存。")]),n._v(" "),t("h3",{attrs:{id:"new-function-使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new-function-使用场景"}},[n._v("#")]),n._v(" new Function 使用场景")]),n._v(" "),t("p",[t("code",[n._v("new Function()")]),n._v(" 的使用场景主要是动态生成 Javascript 代码的情况。由于它可以使用字符串形式作为函数体，并接受可变数量的参数，因此很适合在需要动态生成 JavaScript 代码的场景中使用。下面列举一些常见的使用场景：")]),n._v(" "),t("ol",[t("li",[n._v("动态生成函数：使用 "),t("code",[n._v("new Function()")]),n._v(" 可以动态生成函数，有时候这种方式比使用函数表达式更加灵活。")]),n._v(" "),t("li",[n._v("模板引擎：某些模板引擎使用 "),t("code",[n._v("new Function()")]),n._v(" 动态生成 JavaScript 代码来进行文本渲染和数据绑定。")]),n._v(" "),t("li",[n._v("解析 JSON：从服务端获取 JSON 数据时，可以使用 "),t("code",[n._v("new Function()")]),n._v(" 将其转换为具有更好可读性的 JavaScript 对象。")])])])])])}),[],!1,null,null,null);t.default=s.exports}}]);