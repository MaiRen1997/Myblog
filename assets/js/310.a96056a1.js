(window.webpackJsonp=window.webpackJsonp||[]).push([[310],{789:function(v,_,t){"use strict";t.r(_);var o=t(7),e=Object(o.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"pep-8风格指南"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pep-8风格指南"}},[v._v("#")]),v._v(" PEP 8风格指南")]),v._v(" "),_("p",[v._v("PEP是Python Enhancement Proposal的缩写，通常翻译为“Python增强提案”。每个PEP都是一份为Python社区提供的指导Python往更好的方向发展的技术文档，其中的第8号增强提案（PEP 8）是针对Python语言编订的代码风格指南。尽管我们可以在保证语法没有问题的前提下随意书写Python代码，但是在实际开发中，采用一致的风格书写出可读性强的代码是每个专业的程序员应该做到的事情，也是每个公司的编程规范中会提出的要求，这些在多人协作开发一个项目（团队开发）的时候显得尤为重要。我们可以从Python官方网站的"),_("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0008/",target:"_blank",rel:"noopener noreferrer"}},[v._v("PEP 8链接"),_("OutboundLink")],1),v._v("中找到该文档，下面我们对该文档的关键部分做一个简单的总结。")]),v._v(" "),_("h3",{attrs:{id:"空格的使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#空格的使用"}},[v._v("#")]),v._v(" 空格的使用")]),v._v(" "),_("ol",[_("li",[_("u",[v._v("使用空格来表示缩进而不要用制表符（Tab）。")]),v._v("这一点对习惯了其他编程语言的人来说简直觉得不可理喻，因为绝大多数的程序员都会用Tab来表示缩进，但是要知道Python并没有像C/C++或Java那样的用花括号来构造一个代码块的语法，在Python中分支和循环结构都使用缩进来表示哪些代码属于同一个级别，鉴于此Python代码对缩进以及缩进宽度的依赖比其他很多语言都强得多。在不同的编辑器中，Tab的宽度可能是2、4或8个字符，甚至是其他更离谱的值，用Tab来表示缩进对Python代码来说可能是一场灾难。")]),v._v(" "),_("li",[_("u",[v._v("和语法相关的每一层缩进都用4个空格来表示。")])]),v._v(" "),_("li",[_("u",[v._v("每行的字符数不要超过79个字符，如果表达式因太长而占据了多行，除了首行之外的其余各行都应该在正常的缩进宽度上再加上4个空格。")])]),v._v(" "),_("li",[_("u",[v._v("函数和类的定义，代码前后都要用两个空行进行分隔。")])]),v._v(" "),_("li",[_("u",[v._v("在同一个类中，各个方法之间应该用一个空行进行分隔。")])]),v._v(" "),_("li",[_("u",[v._v("二元运算符的左右两侧应该保留一个空格，而且只要一个空格就好。")])])]),v._v(" "),_("h3",{attrs:{id:"标识符命名"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标识符命名"}},[v._v("#")]),v._v(" 标识符命名")]),v._v(" "),_("p",[v._v("PEP 8倡导用不同的命名风格来命名Python中不同的标识符，以便在阅读代码时能够通过标识符的名称来确定该标识符在Python中扮演了怎样的角色（在这一点上，Python自己的内置模块以及某些第三方模块都做得并不是很好）。")]),v._v(" "),_("ol",[_("li",[_("u",[v._v("变量、函数和属性应该使用小写字母来拼写，如果有多个单词就使用下划线进行连接。")])]),v._v(" "),_("li",[_("u",[v._v("类中受保护的实例属性，应该以一个下划线开头。")])]),v._v(" "),_("li",[_("u",[v._v("类中私有的实例属性，应该以两个下划线开头。")])]),v._v(" "),_("li",[_("u",[v._v("类和异常的命名，应该每个单词首字母大写。")])]),v._v(" "),_("li",[_("u",[v._v("模块级别的常量，应该采用全大写字母，如果有多个单词就用下划线进行连接。")])]),v._v(" "),_("li",[_("u",[v._v("类的实例方法，应该把第一个参数命名为"),_("code",[v._v("self")]),v._v("以表示对象自身。")])]),v._v(" "),_("li",[_("u",[v._v("类的类方法，应该把第一个参数命名为"),_("code",[v._v("cls")]),v._v("以表示该类自身。")])])]),v._v(" "),_("h3",{attrs:{id:"表达式和语句"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#表达式和语句"}},[v._v("#")]),v._v(" 表达式和语句")]),v._v(" "),_("p",[v._v("在Python之禅（可以使用"),_("code",[v._v("import this")]),v._v("查看）中有这么一句名言：“There should be one-- and preferably only one --obvious way to do it.”，翻译成中文是“做一件事应该有而且最好只有一种确切的做法”，这句话传达的思想在PEP 8中也是无处不在的。")]),v._v(" "),_("ol",[_("li",[_("u",[v._v("采用内联形式的否定词，而不要把否定词放在整个表达式的前面。")]),v._v("例如"),_("code",[v._v("if a is not b")]),v._v("就比"),_("code",[v._v("if not a is b")]),v._v("更容易让人理解。")]),v._v(" "),_("li",[v._v("不要用检查长度的方式来判断字符串、列表等是否为"),_("code",[v._v("None")]),v._v("或者没有元素，应该用"),_("code",[v._v("if not x")]),v._v("这样的写法来检查它。")]),v._v(" "),_("li",[_("u",[v._v("就算"),_("code",[v._v("if")]),v._v("分支、"),_("code",[v._v("for")]),v._v("循环、"),_("code",[v._v("except")]),v._v("异常捕获等中只有一行代码，也不要将代码和"),_("code",[v._v("if")]),v._v("、"),_("code",[v._v("for")]),v._v("、"),_("code",[v._v("except")]),v._v("等写在一起，分开写才会让代码更清晰。")])]),v._v(" "),_("li",[_("u",[_("code",[v._v("import")]),v._v("语句总是放在文件开头的地方。")])]),v._v(" "),_("li",[_("u",[v._v("引入模块的时候，"),_("code",[v._v("from math import sqrt")]),v._v("比"),_("code",[v._v("import math")]),v._v("更好。")])]),v._v(" "),_("li",[_("u",[v._v("如果有多个"),_("code",[v._v("import")]),v._v("语句，应该将其分为三部分，从上到下分别是Python"),_("strong",[v._v("标准模块")]),v._v("、"),_("strong",[v._v("第三方模块")]),v._v("和"),_("strong",[v._v("自定义模块")]),v._v("，每个部分内部应该按照模块名称的"),_("strong",[v._v("字母表顺序")]),v._v("来排列。")])])])])}),[],!1,null,null,null);_.default=e.exports}}]);