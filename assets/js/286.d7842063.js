(window.webpackJsonp=window.webpackJsonp||[]).push([[286],{757:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"numpy的应用-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#numpy的应用-4"}},[t._v("#")]),t._v(" NumPy的应用-4")]),t._v(" "),s("h3",{attrs:{id:"向量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向量"}},[t._v("#")]),t._v(" 向量")]),t._v(" "),s("p",[s("strong",[t._v("向量")]),t._v("（"),s("em",[t._v("vector")]),t._v("）也叫"),s("strong",[t._v("矢量")]),t._v("，是一个同时具有大小和方向，且满足平行四边形法则的几何对象。与向量相对的概念叫"),s("strong",[t._v("标量")]),t._v("或"),s("strong",[t._v("数量")]),t._v("，标量只有大小，绝大多数情况下没有方向。我们通常用带箭头的线段来表示向量，在平面直角坐标系中的向量如下图所示。需要注意的是，向量是表达大小和方向的量，并没有规定起点和终点，所以相同的向量可以画在任意位置，例如下图中$\\boldsymbol{w}$和$\\boldsymbol{v}$两个向量并没有什么区别。")]),t._v(" "),s("img",{staticStyle:{zoom:"40%"},attrs:{src:"res/vector_1.png"}}),t._v(" "),s("p",[t._v("向量有很多种代数表示法，对于二维空间的向量，下面几种写法都是可以的。\n$$\n\\boldsymbol{a} = \\langle a_1, a_2 \\rangle = (a_1, a_2) = \\begin{pmatrix} a_1 \\ a_2 \\end{pmatrix} = \\begin{bmatrix} a_1 \\ a_2 \\end{bmatrix}\n$$\n向量的大小称为向量的模，它是一个标量，对于二维空间的向量，模可以通过下面的公式计算。\n$$\n\\lvert \\boldsymbol{a} \\rvert = \\sqrt{a_{1}^{2} + a_{2}^{2}}\n$$\n注意，这里的$\\lvert \\boldsymbol{a} \\rvert$并不是绝对值，你可以将其称为向量$\\boldsymbol{a}$的二范数，这是数学中的符号重用现象。上面的写法和概念也可以推广到$n$维空间，我们通常用$\\boldsymbol{R^n}$表示$n$维空间，我们刚才说的二维空间可以记为$\\boldsymbol{R^2}$，三维空间可以记为$\\boldsymbol{R^3}$。虽然生活在三维空间的我们很难想象四维空间、五维空间是什么样子，但是这并不影响我们探讨高维空间，机器学习中，我们经常把有$n$个特征的训练样本称为一个$n$维向量。")]),t._v(" "),s("h4",{attrs:{id:"向量的加法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向量的加法"}},[t._v("#")]),t._v(" 向量的加法")]),t._v(" "),s("p",[t._v("相同维度的向量可以相加得到一个新的向量，运算的方法是将向量的每个分量相加，如下所示。\n$$\n\\boldsymbol{u} = \\begin{bmatrix} u_1 \\ u_2 \\ \\vdots \\ u_n \\end{bmatrix}, \\quad\n\\boldsymbol{v} = \\begin{bmatrix} v_1 \\ v_2 \\ \\vdots \\ v_n \\end{bmatrix}, \\quad\n\\boldsymbol{u} + \\boldsymbol{v} = \\begin{bmatrix} u_1 + v_1 \\ u_2 + v_2 \\ \\vdots \\ u_n + v_n \\end{bmatrix}\n$$\n向量的加法满足“平行四边形法则”，即两个向量$\\boldsymbol{u}$和$\\boldsymbol{v}$构成了平行四边形的两条邻边，相加的结果是平行四边形的对角线，如下图所示。")]),t._v(" "),s("img",{staticStyle:{zoom:"58%"},attrs:{src:"res/vector_2.png"}}),t._v(" "),s("h4",{attrs:{id:"向量的数乘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向量的数乘"}},[t._v("#")]),t._v(" 向量的数乘")]),t._v(" "),s("p",[t._v("一个向量$\\boldsymbol{v}$可以和一个标量$k$相乘，运算的方法是将向量中的每个分量与该标量相乘即可，如下所示。\n$$\n\\boldsymbol{v} = \\begin{bmatrix} v_1 \\ v_2 \\ \\vdots \\ v_n \\end{bmatrix}, \\quad\nk \\cdot \\boldsymbol{v} = \\begin{bmatrix} k \\cdot v_1 \\ k \\cdot v_2 \\ \\vdots \\ k \\cdot v_n \\end{bmatrix}\n$$\n我们可以用 NumPy 的数组来表示向量，向量的加法可以通过两个数组的加法来实现，向量的数乘可以通过数组和标量的乘法来实现，此处不再进行赘述。")]),t._v(" "),s("h4",{attrs:{id:"向量的点积"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向量的点积"}},[t._v("#")]),t._v(" 向量的点积")]),t._v(" "),s("p",[t._v("点积（"),s("em",[t._v("dot product")]),t._v("）是两个向量之间最为重要的运算之一，运算的方法是将两个向量对应分量的乘积求和，所以点积的结果是一个标量，其几何意义是两个向量的模乘以二者夹角的余弦如下所示。\n$$\n\\boldsymbol{u} = \\begin{bmatrix} u_1 \\ u_2 \\ \\vdots \\ u_n \\end{bmatrix}, \\quad\n\\boldsymbol{v} = \\begin{bmatrix} v_1 \\ v_2 \\ \\vdots \\ v_n \\end{bmatrix} \\quad \\\n\\boldsymbol{u} \\cdot \\boldsymbol{v} = \\sum_{i=1}^{n}{u_iv_i} = \\lvert \\boldsymbol{u} \\rvert \\lvert \\boldsymbol{v} \\rvert cos\\theta\n$$\n假如我们用3维向量来表示用户对喜剧片、言情片和动作片这三类电影的偏好，我们用1到5的数字来表示喜欢的程度，其中5表示非常喜欢，4表示比较喜欢，3表示无感，2表示比较反感，1表示特别反感。那么，下面的向量表示用户非常喜欢喜剧片，特别反感言情片，对动作片不喜欢也不反感。\n$$\n\\boldsymbol{u} = \\begin{pmatrix} 5 \\ 1 \\ 3 \\end{pmatrix}\n$$\n现在有两部电影上映了，一部属于言情喜剧片，一部属于喜剧动作片，我们把两部电影也通过3维向量的方式进行表示，如下所示。\n$$\n\\boldsymbol{m_1} = \\begin{pmatrix} 4 \\ 5 \\ 1 \\end{pmatrix}, \\quad \\boldsymbol{m_2} = \\begin{pmatrix} 5 \\ 1 \\ 5 \\end{pmatrix}\n$$\n如果现在我们需要向刚才的用户推荐一部电影，我们应该给他推荐哪一部呢？我们可以将代表用户的向量$\\boldsymbol{u}$和代表电影的向量$\\boldsymbol{m_1}$和$\\boldsymbol{m_2}$分别进行点积运算，再除以向量的模长，得到向量夹角的余弦值，余弦值越接近1，说明向量的夹角越接近0度，也就是两个向量的相似度越高。很显然，我们应该向用户推荐跟他观影喜好相似度更高的电影。\n$$\ncos\\theta_1 = \\frac{\\boldsymbol{u} \\cdot \\boldsymbol{m1}}{|\\boldsymbol{u}||\\boldsymbol{m1}|} \\approx \\frac{4 \\times 5 + 5 \\times 1 + 3 \\times 1}{5.92 \\times 6.48} \\approx 0.73 \\\ncos\\theta_2 = \\frac{\\boldsymbol{u} \\cdot \\boldsymbol{m2}}{|\\boldsymbol{u}||\\boldsymbol{m2}|} \\approx \\frac{5 \\times 5 + 1 \\times 1 + 3 \\times 5}{5.92 \\times 7.14} \\approx 0.97\n$$\n大家可能会说，向量$\\boldsymbol{m_2}$代表的电影肉眼可见跟用户是更加匹配的。的确，对于一个三维向量我们凭借直觉也能够给出正确的答案，但是对于一个$n$维向量，当$n$的值非常大时，你还有信心凭借肉眼的观察和本能的直觉给出准确的答案吗？向量的点积可以通过"),s("code",[t._v("dot")]),t._v("函数来计算，而向量的模长可以通过 NumPy 的"),s("code",[t._v("linalg")]),t._v("模块中的"),s("code",[t._v("norm")]),t._v("函数来计算，代码如下所示。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("u "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nm1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nm2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("linalg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("norm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("linalg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("norm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0.7302967433402214")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("linalg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("norm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("linalg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("norm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0.9704311900788593")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h4",{attrs:{id:"向量的叉积"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向量的叉积"}},[t._v("#")]),t._v(" 向量的叉积")]),t._v(" "),s("p",[t._v("在二维空间，两个向量的叉积是这样定义的：\n$$\n\\boldsymbol{A} = \\begin{pmatrix} a_{1} \\ a_{2} \\end{pmatrix}, \\quad \\boldsymbol{B} = \\begin{pmatrix} b_{1} \\ b_{2} \\end{pmatrix} \\\n\\boldsymbol{A} \\times \\boldsymbol{B} = \\begin{vmatrix} a_{1} \\quad a_{2} \\ b_{1} \\quad b_{2} \\end{vmatrix} = a_{1}b_{2} - a_{2}b_{1}\n$$\n对于三维空间，两个向量的叉积结果是一个向量，如下所示：\n$$\n\\boldsymbol{A} = \\begin{pmatrix} a_{1} \\ a_{2} \\ a_{3} \\end{pmatrix}, \\quad \\boldsymbol{B} = \\begin{pmatrix} b_{1} \\ b_{2} \\ b_{3} \\end{pmatrix} \\\n\\boldsymbol{A} \\times \\boldsymbol{B} = \\begin{vmatrix} \\boldsymbol{\\hat{i}} \\quad \\boldsymbol{\\hat{j}} \\quad \\boldsymbol{\\hat{k}} \\ a_{1} \\quad a_{2} \\quad a_{3} \\ b_{1} \\quad b_{2} \\quad b_{3} \\end{vmatrix} = \\langle \\boldsymbol{\\hat{i}}\\begin{vmatrix} a_{2} \\quad a_{3} \\ b_{2} \\quad b_{3} \\end{vmatrix}, -\\boldsymbol{\\hat{j}}\\begin{vmatrix} a_{1} \\quad a_{3} \\ b_{1} \\quad b_{3} \\end{vmatrix}, \\boldsymbol{\\hat{k}}\\begin{vmatrix} a_{1} \\quad a_{2} \\ b_{1} \\quad b_{2} \\end{vmatrix} \\rangle\n$$\n因为叉积的结果是向量，所以$\\boldsymbol{A} \\times \\boldsymbol{B}$和$\\boldsymbol{B} \\times \\boldsymbol{A}$的结果并不相同，事实上：\n$$\n\\boldsymbol{A} \\times \\boldsymbol{B} = -(\\boldsymbol{B} \\times \\boldsymbol{A})\n$$\nNumPy 中可以通过"),s("code",[t._v("cross")]),t._v("函数来计算向量的叉积，代码如下所示。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cross"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [-14   7  21]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cross"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [ 14  -7 -21]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"行列式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#行列式"}},[t._v("#")]),t._v(" 行列式")]),t._v(" "),s("p",[s("strong",[t._v("行列式")]),t._v("（"),s("em",[t._v("determinant")]),t._v("）通常记作$det(\\boldsymbol{A})$或$|\\boldsymbol{A}|$，其中$\\boldsymbol{A}$是一个$n$阶方阵。行列式可以看做是有向面积或体积的概念在一般欧几里得空间的推广，或者说行列式描述的是一个线性变换对“体积”所造成的影响。行列式的概念最早出现在解线性方程组的过程中，十七世纪晚期，关孝和（日本江户时代的数学家）与莱布尼茨的著作中已经使用行列式来确定线性方程组解的个数以及形式；十八世纪开始，行列式开始作为独立的数学概念被研究；十九世纪以后，行列式理论进一步得到发展和完善。")]),t._v(" "),s("img",{staticStyle:{zoom:"125%"},attrs:{src:"res/Parallelogramme.jpeg"}}),t._v(" "),s("h4",{attrs:{id:"行列式的性质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#行列式的性质"}},[t._v("#")]),t._v(" 行列式的性质")]),t._v(" "),s("p",[t._v("行列式是由向量引出的，所以行列式解释的其实是向量的性质。")]),t._v(" "),s("p",[s("strong",[t._v("性质1")]),t._v("：如果$det(\\boldsymbol{A})$中某行（或某列）的元素全部为0，那么$det(\\boldsymbol{A}) = 0$。")]),t._v(" "),s("p",[s("strong",[t._v("性质2")]),t._v("：如果$det(\\boldsymbol{A})$中某行（或某列）有公共因子$k$，则可以提出$k$，得到行列式$det(\\boldsymbol{A^{'}})$，且$det(\\boldsymbol{A}) = k \\cdot det(\\boldsymbol{A^{'}})$。\n$$\ndet(\\boldsymbol{A})={\\begin{vmatrix}a_{11}&a_{12}&\\dots &a_{1n}\\\\vdots &\\vdots &\\ddots &\\vdots \\{\\color {blue}k}a_{i1}&{\\color {blue}k}a_{i2}&\\dots &{\\color {blue}k}a_{in}\\\\vdots &\\vdots &\\ddots &\\vdots \\a_{n1}&a_{n2}&\\dots &a_{nn}\\end{vmatrix}}={\\color {blue}k}{\\begin{vmatrix}a_{11}&a_{12}&\\dots &a_{1n}\\\\vdots &\\vdots &\\ddots &\\vdots \\a_{i1}&a_{i2}&\\dots &a_{in}\\\\vdots &\\vdots &\\ddots &\\vdots \\a_{n1}&a_{n2}&\\dots &a_{nn}\\end{vmatrix}}={\\color {blue}k} \\cdot det(\\boldsymbol{A^{'}})\n$$")]),t._v(" "),s("p",[s("strong",[t._v("性质3")]),t._v("：如果$det(\\boldsymbol{A})$中某行（或某列）的每个元素是两数之和，则此行列式可拆分为两个行列式相加，如下所示。\n$$\n{\\begin{vmatrix}a_{11}&a_{12}&\\dots &a_{1n}\\\\vdots &\\vdots &\\ddots &\\vdots \\{\\color {blue}a_{i1}}+{\\color {OliveGreen}b_{i1}}&{\\color {blue}a_{i2}}+{\\color {OliveGreen}b_{i2}}&\\dots &{\\color {blue}a_{in}}+{\\color {OliveGreen}b_{in}}\\\\vdots &\\vdots &\\ddots &\\vdots \\a_{n1}&a_{n2}&\\dots &a_{nn}\\end{vmatrix}}={\\begin{vmatrix}a_{11}&a_{12}&\\dots &a_{1n}\\\\vdots &\\vdots &\\ddots &\\vdots \\{\\color {blue}a_{i1}}&{\\color {blue}a_{i2}}&\\dots &{\\color {blue}a_{in}}\\\\vdots &\\vdots &\\ddots &\\vdots \\a_{n1}&a_{n2}&\\dots &a_{nn}\\end{vmatrix}}+{\\begin{vmatrix}a_{11}&a_{12}&\\dots &a_{1n}\\\\vdots &\\vdots &\\ddots &\\vdots \\{\\color {OliveGreen}b_{i1}}&{\\color {OliveGreen}b_{i2}}&\\dots &{\\color {OliveGreen}b_{in}}\\\\vdots &\\vdots &\\ddots &\\vdots \\a_{n1}&a_{n2}&\\dots &a_{nn}\\end{vmatrix}}\n$$\n"),s("strong",[t._v("性质4")]),t._v("：如果$det(\\boldsymbol{A})$中两行（或两列）元素对应成比例，那么$det(\\boldsymbol{A}) = 0$。")]),t._v(" "),s("p",[s("strong",[t._v("性质5")]),t._v("：如果$det(\\boldsymbol{A})$中两行（或两列）互换得到$det(\\boldsymbol{A^{'}})$，那么$det(\\boldsymbol{A}) = -det(\\boldsymbol{A^{'}})$。")]),t._v(" "),s("p",[s("strong",[t._v("性质6")]),t._v("：将$det(\\boldsymbol{A})$中某行（或某列）的$k$倍加进另一行（或另一列）里，行列式的值不变，如下所示。\n$$\n{\\begin{vmatrix}\\vdots &\\vdots &\\vdots &\\vdots \\a_{i1}&a_{i2}&\\dots &a_{in}\\a_{j1}&a_{j2}&\\dots &a_{jn}\\\\vdots &\\vdots &\\vdots &\\vdots \\\\end{vmatrix}}={\\begin{vmatrix}\\vdots &\\vdots &\\vdots &\\vdots \\a_{i1}&a_{i2}&\\dots &a_{in}\\a_{j1}{\\color {blue}+ka_{i1}}&a_{j2}{\\color {blue}+ka_{i2}}&\\dots &a_{jn}{\\color {blue}+ka_{in}}\\\\vdots &\\vdots &\\vdots &\\vdots \\\\end{vmatrix}}\n$$\n"),s("strong",[t._v("性质7")]),t._v("：将行列式的行列互换，行列式的值不变，如下所示。\n$$\n{\\begin{vmatrix}a_{11}&a_{12}&\\dots &a_{1n}\\a_{21}&a_{22}&\\dots &a_{2n}\\\\vdots &\\vdots &\\ddots &\\vdots \\a_{n1}&a_{n2}&\\dots &a_{nn}\\end{vmatrix}}={\\begin{vmatrix}a_{11}&a_{21}&\\dots &a_{n1}\\a_{12}&a_{22}&\\dots &a_{n2}\\\\vdots &\\vdots &\\ddots &\\vdots \\a_{1n}&a_{2n}&\\dots &a_{nn}\\end{vmatrix}}\n$$\n"),s("strong",[t._v("性质8")]),t._v("：方块矩阵$\\boldsymbol{A}$和$\\boldsymbol{B}$的乘积的行列式等于其行列式的乘积，即$det(\\boldsymbol{A}\\boldsymbol{B}) = det(\\boldsymbol{A})det(\\boldsymbol{B})$。特别的，若将矩阵中的每一行都乘以常数$r$，那么行列式的值将是原来的$r^{n}$倍，即$det(r\\boldsymbol{A}) = det(r\\boldsymbol{I_{n}} \\cdot \\boldsymbol{A}) = r^{n}det(\\boldsymbol{A})$，其中$\\boldsymbol{I_{n}}$是$n$阶单位矩阵。")]),t._v(" "),s("p",[s("strong",[t._v("性质9")]),t._v("：若$\\boldsymbol{A}$是可逆矩阵，那么$det(\\boldsymbol{A}^{-1}) = (det(\\boldsymbol{A}))^{-1}$。")]),t._v(" "),s("h4",{attrs:{id:"行列式的计算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#行列式的计算"}},[t._v("#")]),t._v(" 行列式的计算")]),t._v(" "),s("p",[t._v("$n$阶行列式的计算公式如下所示：\n$$\ndet(\\boldsymbol{A})=\\sum_{n!} \\pm {a_{1\\alpha}a_{2\\beta} \\cdots a_{n\\omega}}\n$$")]),t._v(" "),s("p",[t._v("对于二阶行列式，上面的公式相当于：\n$$\n\\begin{vmatrix} a_{11} \\quad a_{12} \\ a_{21} \\quad a_{22} \\end{vmatrix} = a_{11}a_{22} - a_{12}a_{21}\n$$\n对于三阶行列式，上面的计算公式相当于：\n$$\n\\begin{vmatrix} a_{11} \\quad a_{12} \\quad a_{13} \\ a_{21} \\quad a_{22} \\quad a_{23} \\ a_{31} \\quad a_{32} \\quad a_{33} \\end{vmatrix} = a_{11}a_{22}a_{33} + a_{12}a_{23}a_{31} + a_{13}a_{21}a_{32} - a_{11}a_{23}a_{32} - a_{12}a_{21}a_{33} - a_{13}a_{22}a_{31}\n$$\n高阶行列式可以用"),s("strong",[t._v("代数余子式")]),t._v("（"),s("em",[t._v("cofactor")]),t._v("）展开成多个低阶行列式，如下所示：\n$$\ndet(\\boldsymbol{A})=a_{11}C_{11}+a_{12}C_{12}+ \\cdots +a_{1n}C_{1n} = \\sum_{i=1}^{n}{a_{1i}C_{1i}}\n$$\n其中，$C_{11}$是原行列式去掉$a_{11}$所在行和列之后剩余的部分构成的行列式，以此类推。")]),t._v(" "),s("h3",{attrs:{id:"矩阵"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#矩阵"}},[t._v("#")]),t._v(" 矩阵")]),t._v(" "),s("p",[s("strong",[t._v("矩阵")]),t._v("（"),s("em",[t._v("matrix")]),t._v("）是由一系列元素排成的矩形阵列，矩阵里的元素可以是数字、符号或数学公式。矩阵可以进行"),s("strong",[t._v("加法")]),t._v("、"),s("strong",[t._v("减法")]),t._v("、"),s("strong",[t._v("数乘")]),t._v("、"),s("strong",[t._v("转置")]),t._v("、"),s("strong",[t._v("矩阵乘法")]),t._v("等运算，如下图所示。")]),t._v(" "),s("img",{staticStyle:{zoom:"62%"},attrs:{src:"res/matrix_operation.png"}}),t._v(" "),s("p",[t._v("值得一提的是矩阵乘法运算，该运算仅当第一个矩阵$\\boldsymbol{A}$的列数和另一个矩阵$\\boldsymbol{B}$的行数相等时才能定义。如果$\\boldsymbol{A}$是一个$m \\times n$的矩阵，$\\boldsymbol{B}$是一个$n \\times k$矩阵，它们的乘积是一个$m \\times k$的矩阵，其中元素的计算公式如下所示：\n$$\n[\\mathbf{AB}]"),s("em",[t._v("{i,j} = A")]),t._v("{i,1}B_{1,j} + A_{i,2}B_{2,j} + \\cdots + A_{i,n}B_{n,j} = \\sum_{r=1}^n A_{i,r}B_{r,j}\n$$\n"),s("img",{staticStyle:{zoom:"35%"},attrs:{src:"res/matrix_multiply.png"}})]),t._v(" "),s("h1",{attrs:{id:"例如-begin-bmatrix-1-0-2-1-3-1-end-bmatrix-times-begin-bmatrix-3-1-2-1-1-0-end-bmatrix"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例如-begin-bmatrix-1-0-2-1-3-1-end-bmatrix-times-begin-bmatrix-3-1-2-1-1-0-end-bmatrix"}},[t._v("#")]),t._v(" 例如：\n$$\n\\begin{bmatrix}\n1 & 0 & 2 \\\n-1 & 3 & 1 \\\n\\end{bmatrix}\n\\times\n\\begin{bmatrix}\n3 & 1 \\\n2 & 1 \\\n1 & 0\n\\end{bmatrix}")]),t._v(" "),s("h1",{attrs:{id:"begin-bmatrix-1-times-3-0-times-2-2-times-1-1-times-1-0-times-1-2-times-0-1-times-3-3-times-2-1-times-1-1-times-1-3-times-1-1-times-0-end-bmatrix"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#begin-bmatrix-1-times-3-0-times-2-2-times-1-1-times-1-0-times-1-2-times-0-1-times-3-3-times-2-1-times-1-1-times-1-3-times-1-1-times-0-end-bmatrix"}},[t._v("#")]),t._v(" \\begin{bmatrix}\n(1 \\times 3  +  0 \\times 2  +  2 \\times 1) & (1 \\times 1   +   0 \\times 1   +   2 \\times 0) \\\n(-1 \\times 3  +  3 \\times 2  +  1 \\times 1) & (-1 \\times 1   +   3 \\times 1   +   1 \\times 0) \\\n\\end{bmatrix}")]),t._v(" "),s("p",[t._v("\\begin{bmatrix}\n5 & 1 \\\n4 & 2 \\\n\\end{bmatrix}\n$$\n矩阵的乘法满足结合律和对矩阵加法的分配律：")]),t._v(" "),s("p",[t._v("结合律： $(\\boldsymbol{AB})\\boldsymbol{C} = \\boldsymbol{A}(\\boldsymbol{BC})$。")]),t._v(" "),s("p",[t._v("左分配律：$(\\boldsymbol{A} + \\boldsymbol{B})\\boldsymbol{C} = \\boldsymbol{AC} + \\boldsymbol{BC}$。")]),t._v(" "),s("p",[t._v("右分配律：$\\boldsymbol{C}(\\boldsymbol{A} + \\boldsymbol{B}) = \\boldsymbol{CA} + \\boldsymbol{CB}$。")]),t._v(" "),s("p",[s("strong",[t._v("矩阵乘法不满足交换律")]),t._v("。一般情况下，矩阵$\\boldsymbol{A}$和$\\boldsymbol{B}$的乘积$\\boldsymbol{AB}$存在，但$\\boldsymbol{BA}$不一定存在，即便$\\boldsymbol{BA}$存在，大多数时候$\\boldsymbol{AB} \\neq \\boldsymbol{BA}$。")]),t._v(" "),s("p",[t._v("矩阵乘法的一个基本应用是在线性方程组上。线性方程组是方程组的一种，它符合以下的形式：\n$$\n\\begin{cases}\na_{1,1}x_{1} + a_{1,2}x_{2} + \\cdots + a_{1,n}x_{n}=  b_{1} \\\na_{2,1}x_{1} + a_{2,2}x_{2} + \\cdots + a_{2,n}x_{n}=  b_{2} \\\n\\vdots \\quad \\quad \\quad \\vdots \\\na_{m,1}x_{1} + a_{m,2}x_{2} + \\cdots + a_{m,n}x_{n}=  b_{m}\n\\end{cases}\n$$\n运用矩阵的方式，可以将线性方程组写成一个向量方程：\n$$\n\\boldsymbol{Ax} = \\boldsymbol{b}\n$$\n其中，$\\boldsymbol{A}$是由方程组里未知数的系数排成的$m \\times n$矩阵，$\\boldsymbol{x}$是含有$n$个元素的行向量，$\\boldsymbol{b}$是含有$m$个元素的行向量。")]),t._v(" "),s("p",[t._v("矩阵是线性变换（保持向量加法和标量乘法的函数）的便利表达法。矩阵乘法的本质在联系到线性变换的时候最能体现，因为矩阵乘法和线性变换的合成有以下的联系，即每个$m \\times n$的矩阵$\\boldsymbol{A}$都代表了一个从$\\boldsymbol{R}^{n}$射到$\\boldsymbol{R}^{m}$的线性变换。如果无法理解上面这些内容，推荐大家看看B站上名为"),s("a",{attrs:{href:"https://www.bilibili.com/video/BV1ib411t7YR/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《线性代数的本质》"),s("OutboundLink")],1),t._v("的视频，相信这套视频会让你对线性代数有一个更好的认知。")]),t._v(" "),s("p",[t._v("下图是一个来自于维基百科的例子，图中展示了一些典型的二维实平面上的线性变换对平面向量（图形）造成的效果以及它们对应的二维矩阵，其中每个线性变换将蓝色图形映射成绿色图形；平面的原点$(0, 0)$用黑点表示。")]),t._v(" "),s("img",{staticStyle:{zoom:"45%"},attrs:{src:"res/linear_transformation.png"}}),t._v(" "),s("h4",{attrs:{id:"矩阵对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#矩阵对象"}},[t._v("#")]),t._v(" 矩阵对象")]),t._v(" "),s("p",[t._v("NumPy 中提供了专门用于线性代数（"),s("em",[t._v("linear algebra")]),t._v("）的模块和表示矩阵的类型"),s("code",[t._v("matrix")]),t._v("，当然我们通过二维数组也可以表示一个矩阵，官方并不推荐使用"),s("code",[t._v("matrix")]),t._v("类而是建议使用二维数组，而且有可能在将来的版本中会移除"),s("code",[t._v("matrix")]),t._v("类。无论如何，利用这些已经封装好的类和函数，我们可以轻松愉快的实现很多对矩阵的操作。")]),t._v(" "),s("p",[t._v("我们可以通过下面的代码来创建矩阵（"),s("code",[t._v("matrix")]),t._v("）对象。")]),t._v(" "),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-Python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("m1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("matrix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1 2 3; 4 5 6'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nm1\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("blockquote",[s("p",[s("strong",[t._v("说明")]),t._v("："),s("code",[t._v("matrix")]),t._v("构造器可以传入类数组对象也可以传入字符串来构造矩阵对象。")])]),t._v(" "),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("matrix([[1, 2, 3],\n        [4, 5, 6]])\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-Python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("m2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("asmatrix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nm2\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("blockquote",[s("p",[s("strong",[t._v("说明")]),t._v("："),s("code",[t._v("asmatrix")]),t._v("函数也可以用"),s("code",[t._v("mat")]),t._v("函数代替，这两个函数其实是同一个函数。")])]),t._v(" "),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("matrix([[1, 1],\n        [2, 2],\n        [3, 3]])\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-Python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("m1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" m2\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("matrix([[14, 14],\n        [32, 32]])\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("blockquote",[s("p",[s("strong",[t._v("说明")]),t._v("：注意"),s("code",[t._v("matrix")]),t._v("对象和"),s("code",[t._v("ndarray")]),t._v("对象乘法运算的差别，"),s("code",[t._v("matrix")]),t._v("对象的"),s("code",[t._v("*")]),t._v("运算是矩阵乘法运算。如果两个二维数组要做矩阵乘法运算，应该使用"),s("code",[t._v("@")]),t._v("运算符或"),s("code",[t._v("matmul")]),t._v("函数，而不是"),s("code",[t._v("*")]),t._v("运算符。")])]),t._v(" "),s("p",[t._v("矩阵对象的属性如下表所示。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("属性")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("A")])]),t._v(" "),s("td",[t._v("获取矩阵对象对应的"),s("code",[t._v("ndarray")]),t._v("对象")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("A1")])]),t._v(" "),s("td",[t._v("获取矩阵对象对应的扁平化后的"),s("code",[t._v("ndarray")]),t._v("对象")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("I")])]),t._v(" "),s("td",[t._v("可逆矩阵的逆矩阵")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("T")])]),t._v(" "),s("td",[t._v("矩阵的转置")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("H")])]),t._v(" "),s("td",[t._v("矩阵的共轭转置")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("shape")])]),t._v(" "),s("td",[t._v("矩阵的形状")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("size")])]),t._v(" "),s("td",[t._v("矩阵元素的个数")])])])]),t._v(" "),s("p",[t._v("矩阵对象的方法跟之前讲过的"),s("code",[t._v("ndarray")]),t._v("数组对象的方法基本差不多，此处不再进行赘述。")]),t._v(" "),s("h4",{attrs:{id:"线性代数模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线性代数模块"}},[t._v("#")]),t._v(" 线性代数模块")]),t._v(" "),s("p",[t._v("NumPy 的"),s("code",[t._v("linalg")]),t._v("模块中有一组标准的矩阵分解运算以及诸如求逆和行列式之类的函数，它们跟 MATLAB 和 R 等语言所使用的是相同的行业标准线性代数库，下面的表格列出了"),s("code",[t._v("numpy")]),t._v("以及"),s("code",[t._v("linalg")]),t._v("模块中一些常用的线性代数相关函数。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("函数")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("diag")])]),t._v(" "),s("td",[t._v("以一维数组的形式返回方阵的对角线元素或将一维数组转换为方阵（非对角元素元素为0）")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("matmul")])]),t._v(" "),s("td",[t._v("矩阵乘法运算")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("trace")])]),t._v(" "),s("td",[t._v("计算对角线元素的和")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("norm")])]),t._v(" "),s("td",[t._v("求矩阵或向量的范数")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("det")])]),t._v(" "),s("td",[t._v("计算行列式的值")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("matrix_rank")])]),t._v(" "),s("td",[t._v("计算矩阵的秩")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("eig")])]),t._v(" "),s("td",[t._v("计算矩阵的特征值（"),s("em",[t._v("eigenvalue")]),t._v("）和特征向量（"),s("em",[t._v("eigenvector")]),t._v("）")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("inv")])]),t._v(" "),s("td",[t._v("计算非奇异矩阵（$n$阶方阵）的逆矩阵")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("pinv")])]),t._v(" "),s("td",[t._v("计算矩阵的摩尔-彭若斯（"),s("em",[t._v("Moore-Penrose")]),t._v("）广义逆")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("qr")])]),t._v(" "),s("td",[t._v("QR分解（把矩阵分解成一个正交矩阵与一个上三角矩阵的积）")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("svd")])]),t._v(" "),s("td",[t._v("计算奇异值分解（"),s("em",[t._v("singular value decomposition")]),t._v("）")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("solve")])]),t._v(" "),s("td",[t._v("解线性方程组$\\boldsymbol{Ax}=\\boldsymbol{b}$，其中$\\boldsymbol{A}$是一个方阵")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("lstsq")])]),t._v(" "),s("td",[t._v("计算$\\boldsymbol{Ax}=\\boldsymbol{b}$的最小二乘解")])])])]),t._v(" "),s("p",[t._v("下面我们简单尝试一下上面的函数，先试一试求逆矩阵。")]),t._v(" "),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-Python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("m3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nm4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("linalg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nm4\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("array([[-2. ,  1. ],\n       [ 1.5, -0.5]])\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-Python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("around"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m3 @ m4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("blockquote",[s("p",[s("strong",[t._v("说明")]),t._v("："),s("code",[t._v("around")]),t._v("函数对数组元素进行四舍五入操作，默认小数点后面的位数为0。")])]),t._v(" "),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("array([[1., 0.],\n       [0., 1.]])\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("blockquote",[s("p",[s("strong",[t._v("说明")]),t._v("：矩阵和它的逆矩阵做矩阵乘法会得到单位矩阵。")])]),t._v(" "),s("p",[t._v("计算行列式的值。")]),t._v(" "),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-Python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("m5 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nnp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("linalg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("det"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("2\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("计算矩阵的秩。")]),t._v(" "),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-Python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("linalg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("matrix_rank"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("3\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("求解线性方程组。\n$$\n\\begin{cases}\nx_1 + 2x_2 + x_3 = 8 \\\n3x_1 + 7x_2 + 2x_3 = 23 \\\n2x_1 + 2x_2 + x_3 = 9\n\\end{cases}\n$$")]),t._v(" "),s("p",[t._v("对于上面的线性方程组，我们可以用矩阵的形式来表示它，如下所示。\n$$\n\\boldsymbol{A} = \\begin{bmatrix}\n1 & 2 & 1\\\n3 & 7 & 2\\\n2 & 2 & 1\n\\end{bmatrix}, \\quad\n\\boldsymbol{x} = \\begin{bmatrix}\nx_1 \\\nx_2\\\nx_3\n\\end{bmatrix}, \\quad\n\\boldsymbol{b} = \\begin{bmatrix}\n8 \\\n23\\\n9\n\\end{bmatrix}\n$$")]),t._v(" "),s("p",[t._v("$$\n\\boldsymbol{Ax} = \\boldsymbol{b}\n$$")]),t._v(" "),s("p",[t._v("线性方程组有唯一解的条件：系数矩阵$\\boldsymbol{A}$的秩等于增广矩阵$\\boldsymbol{Ab}$的秩，而且跟未知数的个数相同。")]),t._v(" "),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-Python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("A "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reshape"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("linalg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("matrix_rank"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("linalg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("matrix_rank"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hstack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("blockquote",[s("p",[s("strong",[t._v("说明")]),t._v("：使用数组对象的"),s("code",[t._v("reshape")]),t._v("方法调形时，如果其中一个参数为-1，那么该维度有多少个元素是通过数组元素个数（"),s("code",[t._v("size")]),t._v("属性）和其他维度的元素个数自动计算出来的。")])]),t._v(" "),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("3\n3\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-Python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("linalg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("solve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("array([[1.],\n       [2.],\n       [3.]])\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("blockquote",[s("p",[s("strong",[t._v("说明")]),t._v("：上面的结果表示，线性方程组的解为：$x_1 = 1, x_2 = 2, x_3 = 3$。")])]),t._v(" "),s("p",[t._v("下面是另一种求解线性方程组的方法，大家可以停下来思考下为什么。\n$$\n\\boldsymbol{x} = \\boldsymbol{A}^{-1} \\cdot \\boldsymbol{b}\n$$\n代码：")]),t._v(" "),s("div",{staticClass:"language-Python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("linalg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" @ b\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("array([[1.],\n       [2.],\n       [3.]])\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"多项式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多项式"}},[t._v("#")]),t._v(" 多项式")]),t._v(" "),s("p",[t._v("除了数组，NumPy 中还封装了用于"),s("strong",[t._v("多项式")]),t._v("（"),s("em",[t._v("polynomial")]),t._v("）运算的数据类型。多项式是变量的整数次幂与系数的乘积之和，形如：\n$$\nf(x)=a_nx^n + a_{n-1}x^{n-1} + \\cdots + a_1x^{1} + a_0x^{0}\n$$\n在 NumPy 1.4版本之前，我们可以用"),s("code",[t._v("poly1d")]),t._v("类型来表示多项式，目前它仍然可用，但是官方提供了新的模块"),s("code",[t._v("numpy.polynomial")]),t._v("，它除了支持基本的幂级数多项式外，还可以支持切比雪夫多项式、拉盖尔多项式等。")]),t._v(" "),s("h4",{attrs:{id:"创建多项式对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建多项式对象"}},[t._v("#")]),t._v(" 创建多项式对象")]),t._v(" "),s("p",[t._v("创建"),s("code",[t._v("poly1d")]),t._v("对象，例如：$\\small{f(x)=3x^{2}+2x+1}$。")]),t._v(" "),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("p1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("poly1d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\np2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("poly1d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("   2\n3 x + 2 x + 1\n   2\n1 x + 2 x + 3\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h4",{attrs:{id:"多项式的操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多项式的操作"}},[t._v("#")]),t._v(" 多项式的操作")]),t._v(" "),s("p",[s("strong",[t._v("获取多项式的系数")])]),t._v(" "),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("coefficients"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("coeffs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[3 2 1]\n[1 2 3]\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("strong",[t._v("两个多项式的四则运算")])]),t._v(" "),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" p2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" p2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("   2\n4 x + 4 x + 4\n   4     3      2\n3 x + 8 x + 14 x + 8 x + 3\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[s("strong",[t._v("带入$\\small{x}$求多项式的值")])]),t._v(" "),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("34\n18\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("strong",[t._v("多项式求导和不定积分")])]),t._v(" "),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deriv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("integ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n6 x + 2\n   3     2\n1 x + 1 x + 1 x\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[s("strong",[t._v("求多项式的根")])]),t._v(" "),s("p",[t._v("例如有多项式$\\small{f(x)=x^2+3x+2}$，多项式的根即一元二次方程$\\small{x^2+3x+2=0}$的解。")]),t._v(" "),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("p3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("poly1d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("roots"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[-2. -1.]\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("如果使用"),s("code",[t._v("numpy.polynomial")]),t._v("模块的"),s("code",[t._v("Polynomial")]),t._v("类来表示多项式对象，那么对应的操作如下所示。")]),t._v(" "),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" numpy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("polynomial "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Polynomial\n\np3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Polynomial"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出多项式")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 令x=3，计算多项式的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("roots"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 计算多项式的根")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("degree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获得多项式的次数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deriv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 求导")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("integ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 求不定积分")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("2.0 + 3.0·x + 1.0·x²\n20.0\n[-2. -1.]\n2\n3.0 + 2.0·x\n0.0 + 2.0·x + 1.5·x² + 0.33333333·x³\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("h4",{attrs:{id:"最小二乘解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最小二乘解"}},[t._v("#")]),t._v(" 最小二乘解")]),t._v(" "),s("p",[s("code",[t._v("Polynomial")]),t._v("类还有一个名为"),s("code",[t._v("fit")]),t._v("的类方法，它可以给多项式求最小二乘解。所谓最小二乘解（least-squares solution），是用最小二乘法通过最小化误差的平方和来寻找数据的最佳匹配函数的系数。假设多项式为$\\small{f(x)=ax+b}$，最小二乘解就是让下面的残差平方和$\\small{RSS}$达到最小的$\\small{a}$和$\\small{b}$。\n$$\nRSS = \\sum_{i=0}^{k}(f(x_i) - y_i)^{2}\n$$\n例如，我们想利用收集到的月收入和网购支出的历史数据来建立一个预测模型，以达到通过某人的月收入预测他网购支出金额的目标，下面是我们收集到的收入和网购支出的数据，保存在两个数组中。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("25000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15850")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("22000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20010")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26050")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("27300")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8300")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23320")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5250")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5800")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4800")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("31300")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10800")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6750")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6020")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13300")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30020")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("17300")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8835")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3500")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ny "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2599")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1400")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1120")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2560")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1900")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2320")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("800")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1650")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("980")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("580")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1885")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("600")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("800")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("420")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1380")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1980")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3999")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3800")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("725")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("520")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("420")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4020")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("350")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("560")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("我们可以先绘制散点图来了解两组数据是否具有正相关或负相关关系。正相关意味着数组"),s("code",[t._v("x")]),t._v("中较大的值对应到数组"),s("code",[t._v("y")]),t._v("中也是较大的值，而负相关则意味着数组"),s("code",[t._v("x")]),t._v("中较大的值对应到数组"),s("code",[t._v("y")]),t._v("中较小的值。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" matplotlib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pyplot "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" plt\n\nplt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("figure"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dpi"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nplt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scatter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" color"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'blue'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nplt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("show"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"res/in_out_scatter_plot.png"}}),t._v(" "),s("p",[t._v("如果需要定量的研究两组数据的相关性，我们可以计算协方差或相关系数，对应的 NumPy 函数分别是"),s("code",[t._v("cov")]),t._v("和"),s("code",[t._v("corrcoef")]),t._v("。")]),t._v(" "),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("corrcoef"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("array([[1.        , 0.92275889],\n       [0.92275889, 1.        ]])\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("blockquote",[s("p",[s("strong",[t._v("说明")]),t._v("：相关系数是一个"),s("code",[t._v("-1")]),t._v("到"),s("code",[t._v("1")]),t._v("之间的值，越靠近"),s("code",[t._v("1")]),t._v(" 说明正相关性越强，越靠近"),s("code",[t._v("-1")]),t._v("说明负相关性越强，靠近"),s("code",[t._v("0")]),t._v("则说明两组数据没有明显的相关性。上面月收入和网购支出之间的相关系数是"),s("code",[t._v("0.92275889")]),t._v("，说明二者是强正相关关系。")])]),t._v(" "),s("p",[t._v("通过上面的操作，我们确定了收入和网购支出之前存在强正相关关系，于是我们用这些数据来创建一个回归模型，找出一条能够很好的拟合这些数据点的直线。这里，我们就可以用到上面提到的"),s("code",[t._v("fit")]),t._v("方法，具体的代码如下所示。")]),t._v(" "),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" numpy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("polynomial "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Polynomial\n\nPolynomial"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" deg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("convert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("coef\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("blockquote",[s("p",[s("strong",[t._v("说明")]),t._v("："),s("code",[t._v("deg=1")]),t._v("说明回归模型最高次项就是1次项，回归模型形如$\\small{y=ax+b}$；如果要生一个类似于$\\small{y=ax^2+bx+c}$的模型，就需要设置"),s("code",[t._v("deg=2")]),t._v("，以此类推。")])]),t._v(" "),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("array([-2.94883437e+02,  1.10333716e-01])\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("根据上面输出的结果，我们的回归方程应该是$\\small{y=0.110333716x-294.883437}$。我们将这个回归方程绘制到刚才的散点图上，红色的点是我们的预测值，蓝色的点是历史数据，也就是真实值。")]),t._v(" "),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" matplotlib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pyplot "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" plt\n\nplt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scatter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" color"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'blue'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nplt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scatter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.110333716")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("294.883437")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" color"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'red'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nplt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.110333716")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("294.883437")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" color"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'darkcyan'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nplt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("show"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("输出：")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"res/in_out_regression_result.png"}}),t._v(" "),s("p",[t._v("如果不使用"),s("code",[t._v("Polynomial")]),t._v("类型的"),s("code",[t._v("fit")]),t._v("方法，我们也可以通过 NumPy 提供的"),s("code",[t._v("polyfit")]),t._v("函数来完成同样的操作，有兴趣的读者可以自行研究。")])])}),[],!1,null,null,null);s.default=e.exports}}]);